"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cropperjs";
exports.ids = ["vendor-chunks/cropperjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/cropperjs/dist/cropper.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/cropperjs/dist/cropper.esm.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Cropper)\n/* harmony export */ });\n/*!\n * Cropper.js v1.6.1\n * https://fengyuanchen.github.io/cropperjs\n *\n * Copyright 2015-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2023-09-17T03:44:19.860Z\n */ function ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nvar IS_BROWSER =  false && 0;\nvar WINDOW = IS_BROWSER ? window : {};\nvar IS_TOUCH_DEVICE = IS_BROWSER && WINDOW.document.documentElement ? \"ontouchstart\" in WINDOW.document.documentElement : false;\nvar HAS_POINTER_EVENT = IS_BROWSER ? \"PointerEvent\" in WINDOW : false;\nvar NAMESPACE = \"cropper\";\n// Actions\nvar ACTION_ALL = \"all\";\nvar ACTION_CROP = \"crop\";\nvar ACTION_MOVE = \"move\";\nvar ACTION_ZOOM = \"zoom\";\nvar ACTION_EAST = \"e\";\nvar ACTION_WEST = \"w\";\nvar ACTION_SOUTH = \"s\";\nvar ACTION_NORTH = \"n\";\nvar ACTION_NORTH_EAST = \"ne\";\nvar ACTION_NORTH_WEST = \"nw\";\nvar ACTION_SOUTH_EAST = \"se\";\nvar ACTION_SOUTH_WEST = \"sw\";\n// Classes\nvar CLASS_CROP = \"\".concat(NAMESPACE, \"-crop\");\nvar CLASS_DISABLED = \"\".concat(NAMESPACE, \"-disabled\");\nvar CLASS_HIDDEN = \"\".concat(NAMESPACE, \"-hidden\");\nvar CLASS_HIDE = \"\".concat(NAMESPACE, \"-hide\");\nvar CLASS_INVISIBLE = \"\".concat(NAMESPACE, \"-invisible\");\nvar CLASS_MODAL = \"\".concat(NAMESPACE, \"-modal\");\nvar CLASS_MOVE = \"\".concat(NAMESPACE, \"-move\");\n// Data keys\nvar DATA_ACTION = \"\".concat(NAMESPACE, \"Action\");\nvar DATA_PREVIEW = \"\".concat(NAMESPACE, \"Preview\");\n// Drag modes\nvar DRAG_MODE_CROP = \"crop\";\nvar DRAG_MODE_MOVE = \"move\";\nvar DRAG_MODE_NONE = \"none\";\n// Events\nvar EVENT_CROP = \"crop\";\nvar EVENT_CROP_END = \"cropend\";\nvar EVENT_CROP_MOVE = \"cropmove\";\nvar EVENT_CROP_START = \"cropstart\";\nvar EVENT_DBLCLICK = \"dblclick\";\nvar EVENT_TOUCH_START = IS_TOUCH_DEVICE ? \"touchstart\" : \"mousedown\";\nvar EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? \"touchmove\" : \"mousemove\";\nvar EVENT_TOUCH_END = IS_TOUCH_DEVICE ? \"touchend touchcancel\" : \"mouseup\";\nvar EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? \"pointerdown\" : EVENT_TOUCH_START;\nvar EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? \"pointermove\" : EVENT_TOUCH_MOVE;\nvar EVENT_POINTER_UP = HAS_POINTER_EVENT ? \"pointerup pointercancel\" : EVENT_TOUCH_END;\nvar EVENT_READY = \"ready\";\nvar EVENT_RESIZE = \"resize\";\nvar EVENT_WHEEL = \"wheel\";\nvar EVENT_ZOOM = \"zoom\";\n// Mime types\nvar MIME_TYPE_JPEG = \"image/jpeg\";\n// RegExps\nvar REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;\nvar REGEXP_DATA_URL = /^data:/;\nvar REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\nvar REGEXP_TAG_NAME = /^img|canvas$/i;\n// Misc\n// Inspired by the default width and height of a canvas element.\nvar MIN_CONTAINER_WIDTH = 200;\nvar MIN_CONTAINER_HEIGHT = 100;\nvar DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0,\n    // 0, 1, 2, 3\n    // Define the dragging mode of the cropper\n    dragMode: DRAG_MODE_CROP,\n    // 'crop', 'move' or 'none'\n    // Define the initial aspect ratio of the crop box\n    initialAspectRatio: NaN,\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n    // An object with the previous cropping result data\n    data: null,\n    // A selector for adding extra containers to preview\n    preview: \"\",\n    // Re-render the cropper when resize the window\n    responsive: true,\n    // Restore the cropped area after resize the window\n    restore: true,\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n    // Show the black modal\n    modal: true,\n    // Show the dashed lines for guiding\n    guides: true,\n    // Show the center indicator for guiding\n    center: true,\n    // Show the white modal to highlight the crop box\n    highlight: true,\n    // Show the grid background\n    background: true,\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n    // Enable to move the image\n    movable: true,\n    // Enable to rotate the image\n    rotatable: true,\n    // Enable to scale the image\n    scalable: true,\n    // Enable to zoom the image\n    zoomable: true,\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n    // Enable to move the crop box\n    cropBoxMovable: true,\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: MIN_CONTAINER_WIDTH,\n    minContainerHeight: MIN_CONTAINER_HEIGHT,\n    // Shortcuts of events\n    ready: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n};\nvar TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + \"</div>\" + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + \"</div>\" + \"</div>\";\n/**\n * Check if the given value is not a number.\n */ var isNaN = Number.isNaN || WINDOW.isNaN;\n/**\n * Check if the given value is a number.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n */ function isNumber(value) {\n    return typeof value === \"number\" && !isNaN(value);\n}\n/**\n * Check if the given value is a positive number.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\n */ var isPositiveNumber = function isPositiveNumber(value) {\n    return value > 0 && value < Infinity;\n};\n/**\n * Check if the given value is undefined.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n */ function isUndefined(value) {\n    return typeof value === \"undefined\";\n}\n/**\n * Check if the given value is an object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n */ function isObject(value) {\n    return _typeof(value) === \"object\" && value !== null;\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check if the given value is a plain object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n */ function isPlainObject(value) {\n    if (!isObject(value)) {\n        return false;\n    }\n    try {\n        var _constructor = value.constructor;\n        var prototype = _constructor.prototype;\n        return _constructor && prototype && hasOwnProperty.call(prototype, \"isPrototypeOf\");\n    } catch (error) {\n        return false;\n    }\n}\n/**\n * Check if the given value is a function.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n */ function isFunction(value) {\n    return typeof value === \"function\";\n}\nvar slice = Array.prototype.slice;\n/**\n * Convert array-like or iterable object to an array.\n * @param {*} value - The value to convert.\n * @returns {Array} Returns a new array.\n */ function toArray(value) {\n    return Array.from ? Array.from(value) : slice.call(value);\n}\n/**\n * Iterate the given data.\n * @param {*} data - The data to iterate.\n * @param {Function} callback - The process function for each element.\n * @returns {*} The original data.\n */ function forEach(data, callback) {\n    if (data && isFunction(callback)) {\n        if (Array.isArray(data) || isNumber(data.length)) {\n            toArray(data).forEach(function(value, key) {\n                callback.call(data, value, key, data);\n            });\n        } else if (isObject(data)) {\n            Object.keys(data).forEach(function(key) {\n                callback.call(data, data[key], key, data);\n            });\n        }\n    }\n    return data;\n}\n/**\n * Extend the given object.\n * @param {*} target - The target object to extend.\n * @param {*} args - The rest objects for merging to the target object.\n * @returns {Object} The extended object.\n */ var assign = Object.assign || function assign(target) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    if (isObject(target) && args.length > 0) {\n        args.forEach(function(arg) {\n            if (isObject(arg)) {\n                Object.keys(arg).forEach(function(key) {\n                    target[key] = arg[key];\n                });\n            }\n        });\n    }\n    return target;\n};\nvar REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n/**\n * Normalize decimal number.\n * Check out {@link https://0.30000000000000004.com/}\n * @param {number} value - The value to normalize.\n * @param {number} [times=100000000000] - The times for normalizing.\n * @returns {number} Returns the normalized number.\n */ function normalizeDecimalNumber(value) {\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n}\nvar REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;\n/**\n * Apply styles to the given element.\n * @param {Element} element - The target element.\n * @param {Object} styles - The styles for applying.\n */ function setStyle(element, styles) {\n    var style = element.style;\n    forEach(styles, function(value, property) {\n        if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n            value = \"\".concat(value, \"px\");\n        }\n        style[property] = value;\n    });\n}\n/**\n * Check if the given element has a special class.\n * @param {Element} element - The element to check.\n * @param {string} value - The class to search.\n * @returns {boolean} Returns `true` if the special class was found.\n */ function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n}\n/**\n * Add classes to the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be added.\n */ function addClass(element, value) {\n    if (!value) {\n        return;\n    }\n    if (isNumber(element.length)) {\n        forEach(element, function(elem) {\n            addClass(elem, value);\n        });\n        return;\n    }\n    if (element.classList) {\n        element.classList.add(value);\n        return;\n    }\n    var className = element.className.trim();\n    if (!className) {\n        element.className = value;\n    } else if (className.indexOf(value) < 0) {\n        element.className = \"\".concat(className, \" \").concat(value);\n    }\n}\n/**\n * Remove classes from the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be removed.\n */ function removeClass(element, value) {\n    if (!value) {\n        return;\n    }\n    if (isNumber(element.length)) {\n        forEach(element, function(elem) {\n            removeClass(elem, value);\n        });\n        return;\n    }\n    if (element.classList) {\n        element.classList.remove(value);\n        return;\n    }\n    if (element.className.indexOf(value) >= 0) {\n        element.className = element.className.replace(value, \"\");\n    }\n}\n/**\n * Add or remove classes from the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be toggled.\n * @param {boolean} added - Add only.\n */ function toggleClass(element, value, added) {\n    if (!value) {\n        return;\n    }\n    if (isNumber(element.length)) {\n        forEach(element, function(elem) {\n            toggleClass(elem, value, added);\n        });\n        return;\n    }\n    // IE10-11 doesn't support the second parameter of `classList.toggle`\n    if (added) {\n        addClass(element, value);\n    } else {\n        removeClass(element, value);\n    }\n}\nvar REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\n/**\n * Transform the given string from camelCase to kebab-case\n * @param {string} value - The value to transform.\n * @returns {string} The transformed value.\n */ function toParamCase(value) {\n    return value.replace(REGEXP_CAMEL_CASE, \"$1-$2\").toLowerCase();\n}\n/**\n * Get data from the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to get.\n * @returns {string} The data value.\n */ function getData(element, name) {\n    if (isObject(element[name])) {\n        return element[name];\n    }\n    if (element.dataset) {\n        return element.dataset[name];\n    }\n    return element.getAttribute(\"data-\".concat(toParamCase(name)));\n}\n/**\n * Set data to the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to set.\n * @param {string} data - The data value.\n */ function setData(element, name, data) {\n    if (isObject(data)) {\n        element[name] = data;\n    } else if (element.dataset) {\n        element.dataset[name] = data;\n    } else {\n        element.setAttribute(\"data-\".concat(toParamCase(name)), data);\n    }\n}\n/**\n * Remove data from the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to remove.\n */ function removeData(element, name) {\n    if (isObject(element[name])) {\n        try {\n            delete element[name];\n        } catch (error) {\n            element[name] = undefined;\n        }\n    } else if (element.dataset) {\n        // #128 Safari not allows to delete dataset property\n        try {\n            delete element.dataset[name];\n        } catch (error) {\n            element.dataset[name] = undefined;\n        }\n    } else {\n        element.removeAttribute(\"data-\".concat(toParamCase(name)));\n    }\n}\nvar REGEXP_SPACES = /\\s\\s*/;\nvar onceSupported = function() {\n    var supported = false;\n    if (IS_BROWSER) {\n        var once = false;\n        var listener = function listener() {};\n        var options = Object.defineProperty({}, \"once\", {\n            get: function get() {\n                supported = true;\n                return once;\n            },\n            /**\n       * This setter can fix a `TypeError` in strict mode\n       * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n       * @param {boolean} value - The value to set\n       */ set: function set(value) {\n                once = value;\n            }\n        });\n        WINDOW.addEventListener(\"test\", listener, options);\n        WINDOW.removeEventListener(\"test\", listener, options);\n    }\n    return supported;\n}();\n/**\n * Remove event listener from the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Function} listener - The event listener.\n * @param {Object} options - The event options.\n */ function removeListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function(event) {\n        if (!onceSupported) {\n            var listeners = element.listeners;\n            if (listeners && listeners[event] && listeners[event][listener]) {\n                handler = listeners[event][listener];\n                delete listeners[event][listener];\n                if (Object.keys(listeners[event]).length === 0) {\n                    delete listeners[event];\n                }\n                if (Object.keys(listeners).length === 0) {\n                    delete element.listeners;\n                }\n            }\n        }\n        element.removeEventListener(event, handler, options);\n    });\n}\n/**\n * Add event listener to the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Function} listener - The event listener.\n * @param {Object} options - The event options.\n */ function addListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function(event) {\n        if (options.once && !onceSupported) {\n            var _element$listeners = element.listeners, listeners = _element$listeners === void 0 ? {} : _element$listeners;\n            _handler = function handler() {\n                delete listeners[event][listener];\n                element.removeEventListener(event, _handler, options);\n                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                    args[_key2] = arguments[_key2];\n                }\n                listener.apply(element, args);\n            };\n            if (!listeners[event]) {\n                listeners[event] = {};\n            }\n            if (listeners[event][listener]) {\n                element.removeEventListener(event, listeners[event][listener], options);\n            }\n            listeners[event][listener] = _handler;\n            element.listeners = listeners;\n        }\n        element.addEventListener(event, _handler, options);\n    });\n}\n/**\n * Dispatch event on the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Object} data - The additional event data.\n * @returns {boolean} Indicate if the event is default prevented or not.\n */ function dispatchEvent(element, type, data) {\n    var event;\n    // Event and CustomEvent on IE9-11 are global objects, not constructors\n    if (isFunction(Event) && isFunction(CustomEvent)) {\n        event = new CustomEvent(type, {\n            detail: data,\n            bubbles: true,\n            cancelable: true\n        });\n    } else {\n        event = document.createEvent(\"CustomEvent\");\n        event.initCustomEvent(type, true, true, data);\n    }\n    return element.dispatchEvent(event);\n}\n/**\n * Get the offset base on the document.\n * @param {Element} element - The target element.\n * @returns {Object} The offset data.\n */ function getOffset(element) {\n    var box = element.getBoundingClientRect();\n    return {\n        left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n        top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n    };\n}\nvar location = WINDOW.location;\nvar REGEXP_ORIGINS = /^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i;\n/**\n * Check if the given URL is a cross origin URL.\n * @param {string} url - The target URL.\n * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n */ function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n    return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n}\n/**\n * Add timestamp to the given URL.\n * @param {string} url - The target URL.\n * @returns {string} The result URL.\n */ function addTimestamp(url) {\n    var timestamp = \"timestamp=\".concat(new Date().getTime());\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + timestamp;\n}\n/**\n * Get transforms base on the given object.\n * @param {Object} obj - The target object.\n * @returns {string} A string contains transform values.\n */ function getTransforms(_ref) {\n    var rotate = _ref.rotate, scaleX = _ref.scaleX, scaleY = _ref.scaleY, translateX = _ref.translateX, translateY = _ref.translateY;\n    var values = [];\n    if (isNumber(translateX) && translateX !== 0) {\n        values.push(\"translateX(\".concat(translateX, \"px)\"));\n    }\n    if (isNumber(translateY) && translateY !== 0) {\n        values.push(\"translateY(\".concat(translateY, \"px)\"));\n    }\n    // Rotate should come first before scale to match orientation transform\n    if (isNumber(rotate) && rotate !== 0) {\n        values.push(\"rotate(\".concat(rotate, \"deg)\"));\n    }\n    if (isNumber(scaleX) && scaleX !== 1) {\n        values.push(\"scaleX(\".concat(scaleX, \")\"));\n    }\n    if (isNumber(scaleY) && scaleY !== 1) {\n        values.push(\"scaleY(\".concat(scaleY, \")\"));\n    }\n    var transform = values.length ? values.join(\" \") : \"none\";\n    return {\n        WebkitTransform: transform,\n        msTransform: transform,\n        transform: transform\n    };\n}\n/**\n * Get the max ratio of a group of pointers.\n * @param {string} pointers - The target pointers.\n * @returns {number} The result ratio.\n */ function getMaxZoomRatio(pointers) {\n    var pointers2 = _objectSpread2({}, pointers);\n    var maxRatio = 0;\n    forEach(pointers, function(pointer, pointerId) {\n        delete pointers2[pointerId];\n        forEach(pointers2, function(pointer2) {\n            var x1 = Math.abs(pointer.startX - pointer2.startX);\n            var y1 = Math.abs(pointer.startY - pointer2.startY);\n            var x2 = Math.abs(pointer.endX - pointer2.endX);\n            var y2 = Math.abs(pointer.endY - pointer2.endY);\n            var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n            var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n            var ratio = (z2 - z1) / z1;\n            if (Math.abs(ratio) > Math.abs(maxRatio)) {\n                maxRatio = ratio;\n            }\n        });\n    });\n    return maxRatio;\n}\n/**\n * Get a pointer from an event object.\n * @param {Object} event - The target event object.\n * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n * @returns {Object} The result pointer contains start and/or end point coordinates.\n */ function getPointer(_ref2, endOnly) {\n    var pageX = _ref2.pageX, pageY = _ref2.pageY;\n    var end = {\n        endX: pageX,\n        endY: pageY\n    };\n    return endOnly ? end : _objectSpread2({\n        startX: pageX,\n        startY: pageY\n    }, end);\n}\n/**\n * Get the center point coordinate of a group of pointers.\n * @param {Object} pointers - The target pointers.\n * @returns {Object} The center point coordinate.\n */ function getPointersCenter(pointers) {\n    var pageX = 0;\n    var pageY = 0;\n    var count = 0;\n    forEach(pointers, function(_ref3) {\n        var startX = _ref3.startX, startY = _ref3.startY;\n        pageX += startX;\n        pageY += startY;\n        count += 1;\n    });\n    pageX /= count;\n    pageY /= count;\n    return {\n        pageX: pageX,\n        pageY: pageY\n    };\n}\n/**\n * Get the max sizes in a rectangle under the given aspect ratio.\n * @param {Object} data - The original sizes.\n * @param {string} [type='contain'] - The adjust type.\n * @returns {Object} The result sizes.\n */ function getAdjustedSizes(_ref4) {\n    var aspectRatio = _ref4.aspectRatio, height = _ref4.height, width = _ref4.width;\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"contain\";\n    var isValidWidth = isPositiveNumber(width);\n    var isValidHeight = isPositiveNumber(height);\n    if (isValidWidth && isValidHeight) {\n        var adjustedWidth = height * aspectRatio;\n        if (type === \"contain\" && adjustedWidth > width || type === \"cover\" && adjustedWidth < width) {\n            height = width / aspectRatio;\n        } else {\n            width = height * aspectRatio;\n        }\n    } else if (isValidWidth) {\n        height = width / aspectRatio;\n    } else if (isValidHeight) {\n        width = height * aspectRatio;\n    }\n    return {\n        width: width,\n        height: height\n    };\n}\n/**\n * Get the new sizes of a rectangle after rotated.\n * @param {Object} data - The original sizes.\n * @returns {Object} The result sizes.\n */ function getRotatedSizes(_ref5) {\n    var width = _ref5.width, height = _ref5.height, degree = _ref5.degree;\n    degree = Math.abs(degree) % 180;\n    if (degree === 90) {\n        return {\n            width: height,\n            height: width\n        };\n    }\n    var arc = degree % 90 * Math.PI / 180;\n    var sinArc = Math.sin(arc);\n    var cosArc = Math.cos(arc);\n    var newWidth = width * cosArc + height * sinArc;\n    var newHeight = width * sinArc + height * cosArc;\n    return degree > 90 ? {\n        width: newHeight,\n        height: newWidth\n    } : {\n        width: newWidth,\n        height: newHeight\n    };\n}\n/**\n * Get a canvas which drew the given image.\n * @param {HTMLImageElement} image - The image for drawing.\n * @param {Object} imageData - The image data.\n * @param {Object} canvasData - The canvas data.\n * @param {Object} options - The options.\n * @returns {HTMLCanvasElement} The result canvas.\n */ function getSourceCanvas(image, _ref6, _ref7, _ref8) {\n    var imageAspectRatio = _ref6.aspectRatio, imageNaturalWidth = _ref6.naturalWidth, imageNaturalHeight = _ref6.naturalHeight, _ref6$rotate = _ref6.rotate, rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate, _ref6$scaleX = _ref6.scaleX, scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX, _ref6$scaleY = _ref6.scaleY, scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\n    var aspectRatio = _ref7.aspectRatio, naturalWidth = _ref7.naturalWidth, naturalHeight = _ref7.naturalHeight;\n    var _ref8$fillColor = _ref8.fillColor, fillColor = _ref8$fillColor === void 0 ? \"transparent\" : _ref8$fillColor, _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled, imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE, _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality, imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? \"low\" : _ref8$imageSmoothingQ, _ref8$maxWidth = _ref8.maxWidth, maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth, _ref8$maxHeight = _ref8.maxHeight, maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight, _ref8$minWidth = _ref8.minWidth, minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth, _ref8$minHeight = _ref8.minHeight, minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\n    var canvas = document.createElement(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var maxSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: maxWidth,\n        height: maxHeight\n    });\n    var minSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: minWidth,\n        height: minHeight\n    }, \"cover\");\n    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight));\n    // Note: should always use image's natural sizes for drawing as\n    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n    var destMaxSizes = getAdjustedSizes({\n        aspectRatio: imageAspectRatio,\n        width: maxWidth,\n        height: maxHeight\n    });\n    var destMinSizes = getAdjustedSizes({\n        aspectRatio: imageAspectRatio,\n        width: minWidth,\n        height: minHeight\n    }, \"cover\");\n    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n    var params = [\n        -destWidth / 2,\n        -destHeight / 2,\n        destWidth,\n        destHeight\n    ];\n    canvas.width = normalizeDecimalNumber(width);\n    canvas.height = normalizeDecimalNumber(height);\n    context.fillStyle = fillColor;\n    context.fillRect(0, 0, width, height);\n    context.save();\n    context.translate(width / 2, height / 2);\n    context.rotate(rotate * Math.PI / 180);\n    context.scale(scaleX, scaleY);\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\n    context.imageSmoothingQuality = imageSmoothingQuality;\n    context.drawImage.apply(context, [\n        image\n    ].concat(_toConsumableArray(params.map(function(param) {\n        return Math.floor(normalizeDecimalNumber(param));\n    }))));\n    context.restore();\n    return canvas;\n}\nvar fromCharCode = String.fromCharCode;\n/**\n * Get string from char code in data view.\n * @param {DataView} dataView - The data view for read.\n * @param {number} start - The start index.\n * @param {number} length - The read length.\n * @returns {string} The read result.\n */ function getStringFromCharCode(dataView, start, length) {\n    var str = \"\";\n    length += start;\n    for(var i = start; i < length; i += 1){\n        str += fromCharCode(dataView.getUint8(i));\n    }\n    return str;\n}\nvar REGEXP_DATA_URL_HEAD = /^data:.*,/;\n/**\n * Transform Data URL to array buffer.\n * @param {string} dataURL - The Data URL to transform.\n * @returns {ArrayBuffer} The result array buffer.\n */ function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, \"\");\n    var binary = atob(base64);\n    var arrayBuffer = new ArrayBuffer(binary.length);\n    var uint8 = new Uint8Array(arrayBuffer);\n    forEach(uint8, function(value, i) {\n        uint8[i] = binary.charCodeAt(i);\n    });\n    return arrayBuffer;\n}\n/**\n * Transform array buffer to Data URL.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n * @param {string} mimeType - The mime type of the Data URL.\n * @returns {string} The result Data URL.\n */ function arrayBufferToDataURL(arrayBuffer, mimeType) {\n    var chunks = [];\n    // Chunk Typed Array for better performance (#435)\n    var chunkSize = 8192;\n    var uint8 = new Uint8Array(arrayBuffer);\n    while(uint8.length > 0){\n        // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\n        // eslint-disable-next-line prefer-spread\n        chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\n        uint8 = uint8.subarray(chunkSize);\n    }\n    return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join(\"\")));\n}\n/**\n * Get orientation value from given array buffer.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n * @returns {number} The read orientation value.\n */ function resetAndGetOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var orientation;\n    // Ignores range error when the image does not have correct Exif information\n    try {\n        var littleEndian;\n        var app1Start;\n        var ifdStart;\n        // Only handle JPEG image (start by 0xFFD8)\n        if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n            var length = dataView.byteLength;\n            var offset = 2;\n            while(offset + 1 < length){\n                if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n                    app1Start = offset;\n                    break;\n                }\n                offset += 1;\n            }\n        }\n        if (app1Start) {\n            var exifIDCode = app1Start + 4;\n            var tiffOffset = app1Start + 10;\n            if (getStringFromCharCode(dataView, exifIDCode, 4) === \"Exif\") {\n                var endianness = dataView.getUint16(tiffOffset);\n                littleEndian = endianness === 0x4949;\n                if (littleEndian || endianness === 0x4D4D /* bigEndian */ ) {\n                    if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n                        var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n                        if (firstIFDOffset >= 0x00000008) {\n                            ifdStart = tiffOffset + firstIFDOffset;\n                        }\n                    }\n                }\n            }\n        }\n        if (ifdStart) {\n            var _length = dataView.getUint16(ifdStart, littleEndian);\n            var _offset;\n            var i;\n            for(i = 0; i < _length; i += 1){\n                _offset = ifdStart + i * 12 + 2;\n                if (dataView.getUint16(_offset, littleEndian) === 0x0112 /* Orientation */ ) {\n                    // 8 is the offset of the current tag's value\n                    _offset += 8;\n                    // Get the original orientation value\n                    orientation = dataView.getUint16(_offset, littleEndian);\n                    // Override the orientation with its default value\n                    dataView.setUint16(_offset, 1, littleEndian);\n                    break;\n                }\n            }\n        }\n    } catch (error) {\n        orientation = 1;\n    }\n    return orientation;\n}\n/**\n * Parse Exif Orientation value.\n * @param {number} orientation - The orientation to parse.\n * @returns {Object} The parsed result.\n */ function parseOrientation(orientation) {\n    var rotate = 0;\n    var scaleX = 1;\n    var scaleY = 1;\n    switch(orientation){\n        // Flip horizontal\n        case 2:\n            scaleX = -1;\n            break;\n        // Rotate left 180°\n        case 3:\n            rotate = -180;\n            break;\n        // Flip vertical\n        case 4:\n            scaleY = -1;\n            break;\n        // Flip vertical and rotate right 90°\n        case 5:\n            rotate = 90;\n            scaleY = -1;\n            break;\n        // Rotate right 90°\n        case 6:\n            rotate = 90;\n            break;\n        // Flip horizontal and rotate right 90°\n        case 7:\n            rotate = 90;\n            scaleX = -1;\n            break;\n        // Rotate left 90°\n        case 8:\n            rotate = -90;\n            break;\n    }\n    return {\n        rotate: rotate,\n        scaleX: scaleX,\n        scaleY: scaleY\n    };\n}\nvar render = {\n    render: function render() {\n        this.initContainer();\n        this.initCanvas();\n        this.initCropBox();\n        this.renderCanvas();\n        if (this.cropped) {\n            this.renderCropBox();\n        }\n    },\n    initContainer: function initContainer() {\n        var element = this.element, options = this.options, container = this.container, cropper = this.cropper;\n        var minWidth = Number(options.minContainerWidth);\n        var minHeight = Number(options.minContainerHeight);\n        addClass(cropper, CLASS_HIDDEN);\n        removeClass(element, CLASS_HIDDEN);\n        var containerData = {\n            width: Math.max(container.offsetWidth, minWidth >= 0 ? minWidth : MIN_CONTAINER_WIDTH),\n            height: Math.max(container.offsetHeight, minHeight >= 0 ? minHeight : MIN_CONTAINER_HEIGHT)\n        };\n        this.containerData = containerData;\n        setStyle(cropper, {\n            width: containerData.width,\n            height: containerData.height\n        });\n        addClass(element, CLASS_HIDDEN);\n        removeClass(cropper, CLASS_HIDDEN);\n    },\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n        var containerData = this.containerData, imageData = this.imageData;\n        var viewMode = this.options.viewMode;\n        var rotated = Math.abs(imageData.rotate) % 180 === 90;\n        var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n        var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n        var aspectRatio = naturalWidth / naturalHeight;\n        var canvasWidth = containerData.width;\n        var canvasHeight = containerData.height;\n        if (containerData.height * aspectRatio > containerData.width) {\n            if (viewMode === 3) {\n                canvasWidth = containerData.height * aspectRatio;\n            } else {\n                canvasHeight = containerData.width / aspectRatio;\n            }\n        } else if (viewMode === 3) {\n            canvasHeight = containerData.width / aspectRatio;\n        } else {\n            canvasWidth = containerData.height * aspectRatio;\n        }\n        var canvasData = {\n            aspectRatio: aspectRatio,\n            naturalWidth: naturalWidth,\n            naturalHeight: naturalHeight,\n            width: canvasWidth,\n            height: canvasHeight\n        };\n        this.canvasData = canvasData;\n        this.limited = viewMode === 1 || viewMode === 2;\n        this.limitCanvas(true, true);\n        canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n        canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n        canvasData.left = (containerData.width - canvasData.width) / 2;\n        canvasData.top = (containerData.height - canvasData.height) / 2;\n        canvasData.oldLeft = canvasData.left;\n        canvasData.oldTop = canvasData.top;\n        this.initialCanvasData = assign({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n        var options = this.options, containerData = this.containerData, canvasData = this.canvasData, cropBoxData = this.cropBoxData;\n        var viewMode = options.viewMode;\n        var aspectRatio = canvasData.aspectRatio;\n        var cropped = this.cropped && cropBoxData;\n        if (sizeLimited) {\n            var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n            var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n            if (viewMode > 1) {\n                minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n                minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n                if (viewMode === 3) {\n                    if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                        minCanvasWidth = minCanvasHeight * aspectRatio;\n                    } else {\n                        minCanvasHeight = minCanvasWidth / aspectRatio;\n                    }\n                }\n            } else if (viewMode > 0) {\n                if (minCanvasWidth) {\n                    minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n                } else if (minCanvasHeight) {\n                    minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n                } else if (cropped) {\n                    minCanvasWidth = cropBoxData.width;\n                    minCanvasHeight = cropBoxData.height;\n                    if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                        minCanvasWidth = minCanvasHeight * aspectRatio;\n                    } else {\n                        minCanvasHeight = minCanvasWidth / aspectRatio;\n                    }\n                }\n            }\n            var _getAdjustedSizes = getAdjustedSizes({\n                aspectRatio: aspectRatio,\n                width: minCanvasWidth,\n                height: minCanvasHeight\n            });\n            minCanvasWidth = _getAdjustedSizes.width;\n            minCanvasHeight = _getAdjustedSizes.height;\n            canvasData.minWidth = minCanvasWidth;\n            canvasData.minHeight = minCanvasHeight;\n            canvasData.maxWidth = Infinity;\n            canvasData.maxHeight = Infinity;\n        }\n        if (positionLimited) {\n            if (viewMode > (cropped ? 0 : 1)) {\n                var newCanvasLeft = containerData.width - canvasData.width;\n                var newCanvasTop = containerData.height - canvasData.height;\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                canvasData.minTop = Math.min(0, newCanvasTop);\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n                canvasData.maxTop = Math.max(0, newCanvasTop);\n                if (cropped && this.limited) {\n                    canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n                    canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n                    canvasData.maxLeft = cropBoxData.left;\n                    canvasData.maxTop = cropBoxData.top;\n                    if (viewMode === 2) {\n                        if (canvasData.width >= containerData.width) {\n                            canvasData.minLeft = Math.min(0, newCanvasLeft);\n                            canvasData.maxLeft = Math.max(0, newCanvasLeft);\n                        }\n                        if (canvasData.height >= containerData.height) {\n                            canvasData.minTop = Math.min(0, newCanvasTop);\n                            canvasData.maxTop = Math.max(0, newCanvasTop);\n                        }\n                    }\n                }\n            } else {\n                canvasData.minLeft = -canvasData.width;\n                canvasData.minTop = -canvasData.height;\n                canvasData.maxLeft = containerData.width;\n                canvasData.maxTop = containerData.height;\n            }\n        }\n    },\n    renderCanvas: function renderCanvas(changed, transformed) {\n        var canvasData = this.canvasData, imageData = this.imageData;\n        if (transformed) {\n            var _getRotatedSizes = getRotatedSizes({\n                width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n                height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n                degree: imageData.rotate || 0\n            }), naturalWidth = _getRotatedSizes.width, naturalHeight = _getRotatedSizes.height;\n            var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n            var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n            canvasData.left -= (width - canvasData.width) / 2;\n            canvasData.top -= (height - canvasData.height) / 2;\n            canvasData.width = width;\n            canvasData.height = height;\n            canvasData.aspectRatio = naturalWidth / naturalHeight;\n            canvasData.naturalWidth = naturalWidth;\n            canvasData.naturalHeight = naturalHeight;\n            this.limitCanvas(true, false);\n        }\n        if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n            canvasData.left = canvasData.oldLeft;\n        }\n        if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n            canvasData.top = canvasData.oldTop;\n        }\n        canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n        canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n        this.limitCanvas(false, true);\n        canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n        canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n        canvasData.oldLeft = canvasData.left;\n        canvasData.oldTop = canvasData.top;\n        setStyle(this.canvas, assign({\n            width: canvasData.width,\n            height: canvasData.height\n        }, getTransforms({\n            translateX: canvasData.left,\n            translateY: canvasData.top\n        })));\n        this.renderImage(changed);\n        if (this.cropped && this.limited) {\n            this.limitCropBox(true, true);\n        }\n    },\n    renderImage: function renderImage(changed) {\n        var canvasData = this.canvasData, imageData = this.imageData;\n        var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n        var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n        assign(imageData, {\n            width: width,\n            height: height,\n            left: (canvasData.width - width) / 2,\n            top: (canvasData.height - height) / 2\n        });\n        setStyle(this.image, assign({\n            width: imageData.width,\n            height: imageData.height\n        }, getTransforms(assign({\n            translateX: imageData.left,\n            translateY: imageData.top\n        }, imageData))));\n        if (changed) {\n            this.output();\n        }\n    },\n    initCropBox: function initCropBox() {\n        var options = this.options, canvasData = this.canvasData;\n        var aspectRatio = options.aspectRatio || options.initialAspectRatio;\n        var autoCropArea = Number(options.autoCropArea) || 0.8;\n        var cropBoxData = {\n            width: canvasData.width,\n            height: canvasData.height\n        };\n        if (aspectRatio) {\n            if (canvasData.height * aspectRatio > canvasData.width) {\n                cropBoxData.height = cropBoxData.width / aspectRatio;\n            } else {\n                cropBoxData.width = cropBoxData.height * aspectRatio;\n            }\n        }\n        this.cropBoxData = cropBoxData;\n        this.limitCropBox(true, true);\n        // Initialize auto crop area\n        cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n        cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n        // The width/height of auto crop area must large than \"minWidth/Height\"\n        cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n        cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n        cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n        cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n        cropBoxData.oldLeft = cropBoxData.left;\n        cropBoxData.oldTop = cropBoxData.top;\n        this.initialCropBoxData = assign({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n        var options = this.options, containerData = this.containerData, canvasData = this.canvasData, cropBoxData = this.cropBoxData, limited = this.limited;\n        var aspectRatio = options.aspectRatio;\n        if (sizeLimited) {\n            var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n            var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n            var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n            var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height;\n            // The min/maxCropBoxWidth/Height must be less than container's width/height\n            minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n            minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n            if (aspectRatio) {\n                if (minCropBoxWidth && minCropBoxHeight) {\n                    if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n                        minCropBoxHeight = minCropBoxWidth / aspectRatio;\n                    } else {\n                        minCropBoxWidth = minCropBoxHeight * aspectRatio;\n                    }\n                } else if (minCropBoxWidth) {\n                    minCropBoxHeight = minCropBoxWidth / aspectRatio;\n                } else if (minCropBoxHeight) {\n                    minCropBoxWidth = minCropBoxHeight * aspectRatio;\n                }\n                if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n                    maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n                } else {\n                    maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n                }\n            }\n            // The minWidth/Height must be less than maxWidth/Height\n            cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n            cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n            cropBoxData.maxWidth = maxCropBoxWidth;\n            cropBoxData.maxHeight = maxCropBoxHeight;\n        }\n        if (positionLimited) {\n            if (limited) {\n                cropBoxData.minLeft = Math.max(0, canvasData.left);\n                cropBoxData.minTop = Math.max(0, canvasData.top);\n                cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n                cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n            } else {\n                cropBoxData.minLeft = 0;\n                cropBoxData.minTop = 0;\n                cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n                cropBoxData.maxTop = containerData.height - cropBoxData.height;\n            }\n        }\n    },\n    renderCropBox: function renderCropBox() {\n        var options = this.options, containerData = this.containerData, cropBoxData = this.cropBoxData;\n        if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n            cropBoxData.left = cropBoxData.oldLeft;\n        }\n        if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n            cropBoxData.top = cropBoxData.oldTop;\n        }\n        cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n        cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n        this.limitCropBox(false, true);\n        cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n        cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n        cropBoxData.oldLeft = cropBoxData.left;\n        cropBoxData.oldTop = cropBoxData.top;\n        if (options.movable && options.cropBoxMovable) {\n            // Turn to move the canvas when the crop box is equal to the container\n            setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\n        }\n        setStyle(this.cropBox, assign({\n            width: cropBoxData.width,\n            height: cropBoxData.height\n        }, getTransforms({\n            translateX: cropBoxData.left,\n            translateY: cropBoxData.top\n        })));\n        if (this.cropped && this.limited) {\n            this.limitCanvas(true, true);\n        }\n        if (!this.disabled) {\n            this.output();\n        }\n    },\n    output: function output() {\n        this.preview();\n        dispatchEvent(this.element, EVENT_CROP, this.getData());\n    }\n};\nvar preview = {\n    initPreview: function initPreview() {\n        var element = this.element, crossOrigin = this.crossOrigin;\n        var preview = this.options.preview;\n        var url = crossOrigin ? this.crossOriginUrl : this.url;\n        var alt = element.alt || \"The image to preview\";\n        var image = document.createElement(\"img\");\n        if (crossOrigin) {\n            image.crossOrigin = crossOrigin;\n        }\n        image.src = url;\n        image.alt = alt;\n        this.viewBox.appendChild(image);\n        this.viewBoxImage = image;\n        if (!preview) {\n            return;\n        }\n        var previews = preview;\n        if (typeof preview === \"string\") {\n            previews = element.ownerDocument.querySelectorAll(preview);\n        } else if (preview.querySelector) {\n            previews = [\n                preview\n            ];\n        }\n        this.previews = previews;\n        forEach(previews, function(el) {\n            var img = document.createElement(\"img\");\n            // Save the original size for recover\n            setData(el, DATA_PREVIEW, {\n                width: el.offsetWidth,\n                height: el.offsetHeight,\n                html: el.innerHTML\n            });\n            if (crossOrigin) {\n                img.crossOrigin = crossOrigin;\n            }\n            img.src = url;\n            img.alt = alt;\n            /**\n       * Override img element styles\n       * Add `display:block` to avoid margin top issue\n       * Add `height:auto` to override `height` attribute on IE8\n       * (Occur only when margin-top <= -height)\n       */ img.style.cssText = \"display:block;\" + \"width:100%;\" + \"height:auto;\" + \"min-width:0!important;\" + \"min-height:0!important;\" + \"max-width:none!important;\" + \"max-height:none!important;\" + 'image-orientation:0deg!important;\"';\n            el.innerHTML = \"\";\n            el.appendChild(img);\n        });\n    },\n    resetPreview: function resetPreview() {\n        forEach(this.previews, function(element) {\n            var data = getData(element, DATA_PREVIEW);\n            setStyle(element, {\n                width: data.width,\n                height: data.height\n            });\n            element.innerHTML = data.html;\n            removeData(element, DATA_PREVIEW);\n        });\n    },\n    preview: function preview() {\n        var imageData = this.imageData, canvasData = this.canvasData, cropBoxData = this.cropBoxData;\n        var cropBoxWidth = cropBoxData.width, cropBoxHeight = cropBoxData.height;\n        var width = imageData.width, height = imageData.height;\n        var left = cropBoxData.left - canvasData.left - imageData.left;\n        var top = cropBoxData.top - canvasData.top - imageData.top;\n        if (!this.cropped || this.disabled) {\n            return;\n        }\n        setStyle(this.viewBoxImage, assign({\n            width: width,\n            height: height\n        }, getTransforms(assign({\n            translateX: -left,\n            translateY: -top\n        }, imageData))));\n        forEach(this.previews, function(element) {\n            var data = getData(element, DATA_PREVIEW);\n            var originalWidth = data.width;\n            var originalHeight = data.height;\n            var newWidth = originalWidth;\n            var newHeight = originalHeight;\n            var ratio = 1;\n            if (cropBoxWidth) {\n                ratio = originalWidth / cropBoxWidth;\n                newHeight = cropBoxHeight * ratio;\n            }\n            if (cropBoxHeight && newHeight > originalHeight) {\n                ratio = originalHeight / cropBoxHeight;\n                newWidth = cropBoxWidth * ratio;\n                newHeight = originalHeight;\n            }\n            setStyle(element, {\n                width: newWidth,\n                height: newHeight\n            });\n            setStyle(element.getElementsByTagName(\"img\")[0], assign({\n                width: width * ratio,\n                height: height * ratio\n            }, getTransforms(assign({\n                translateX: -left * ratio,\n                translateY: -top * ratio\n            }, imageData))));\n        });\n    }\n};\nvar events = {\n    bind: function bind() {\n        var element = this.element, options = this.options, cropper = this.cropper;\n        if (isFunction(options.cropstart)) {\n            addListener(element, EVENT_CROP_START, options.cropstart);\n        }\n        if (isFunction(options.cropmove)) {\n            addListener(element, EVENT_CROP_MOVE, options.cropmove);\n        }\n        if (isFunction(options.cropend)) {\n            addListener(element, EVENT_CROP_END, options.cropend);\n        }\n        if (isFunction(options.crop)) {\n            addListener(element, EVENT_CROP, options.crop);\n        }\n        if (isFunction(options.zoom)) {\n            addListener(element, EVENT_ZOOM, options.zoom);\n        }\n        addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n        if (options.zoomable && options.zoomOnWheel) {\n            addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {\n                passive: false,\n                capture: true\n            });\n        }\n        if (options.toggleDragModeOnDblclick) {\n            addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n        }\n        addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n        addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n        if (options.responsive) {\n            addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\n        }\n    },\n    unbind: function unbind() {\n        var element = this.element, options = this.options, cropper = this.cropper;\n        if (isFunction(options.cropstart)) {\n            removeListener(element, EVENT_CROP_START, options.cropstart);\n        }\n        if (isFunction(options.cropmove)) {\n            removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n        }\n        if (isFunction(options.cropend)) {\n            removeListener(element, EVENT_CROP_END, options.cropend);\n        }\n        if (isFunction(options.crop)) {\n            removeListener(element, EVENT_CROP, options.crop);\n        }\n        if (isFunction(options.zoom)) {\n            removeListener(element, EVENT_ZOOM, options.zoom);\n        }\n        removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\n        if (options.zoomable && options.zoomOnWheel) {\n            removeListener(cropper, EVENT_WHEEL, this.onWheel, {\n                passive: false,\n                capture: true\n            });\n        }\n        if (options.toggleDragModeOnDblclick) {\n            removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\n        }\n        removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\n        removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\n        if (options.responsive) {\n            removeListener(window, EVENT_RESIZE, this.onResize);\n        }\n    }\n};\nvar handlers = {\n    resize: function resize() {\n        if (this.disabled) {\n            return;\n        }\n        var options = this.options, container = this.container, containerData = this.containerData;\n        var ratioX = container.offsetWidth / containerData.width;\n        var ratioY = container.offsetHeight / containerData.height;\n        var ratio = Math.abs(ratioX - 1) > Math.abs(ratioY - 1) ? ratioX : ratioY;\n        // Resize when width changed or height changed\n        if (ratio !== 1) {\n            var canvasData;\n            var cropBoxData;\n            if (options.restore) {\n                canvasData = this.getCanvasData();\n                cropBoxData = this.getCropBoxData();\n            }\n            this.render();\n            if (options.restore) {\n                this.setCanvasData(forEach(canvasData, function(n, i) {\n                    canvasData[i] = n * ratio;\n                }));\n                this.setCropBoxData(forEach(cropBoxData, function(n, i) {\n                    cropBoxData[i] = n * ratio;\n                }));\n            }\n        }\n    },\n    dblclick: function dblclick() {\n        if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\n            return;\n        }\n        this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\n    },\n    wheel: function wheel(event) {\n        var _this = this;\n        var ratio = Number(this.options.wheelZoomRatio) || 0.1;\n        var delta = 1;\n        if (this.disabled) {\n            return;\n        }\n        event.preventDefault();\n        // Limit wheel speed to prevent zoom too fast (#21)\n        if (this.wheeling) {\n            return;\n        }\n        this.wheeling = true;\n        setTimeout(function() {\n            _this.wheeling = false;\n        }, 50);\n        if (event.deltaY) {\n            delta = event.deltaY > 0 ? 1 : -1;\n        } else if (event.wheelDelta) {\n            delta = -event.wheelDelta / 120;\n        } else if (event.detail) {\n            delta = event.detail > 0 ? 1 : -1;\n        }\n        this.zoom(-delta * ratio, event);\n    },\n    cropStart: function cropStart(event) {\n        var buttons = event.buttons, button = event.button;\n        if (this.disabled || (event.type === \"mousedown\" || event.type === \"pointerdown\" && event.pointerType === \"mouse\") && // No primary button (Usually the left button)\n        (isNumber(buttons) && buttons !== 1 || isNumber(button) && button !== 0 || event.ctrlKey)) {\n            return;\n        }\n        var options = this.options, pointers = this.pointers;\n        var action;\n        if (event.changedTouches) {\n            // Handle touch event\n            forEach(event.changedTouches, function(touch) {\n                pointers[touch.identifier] = getPointer(touch);\n            });\n        } else {\n            // Handle mouse event and pointer event\n            pointers[event.pointerId || 0] = getPointer(event);\n        }\n        if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n            action = ACTION_ZOOM;\n        } else {\n            action = getData(event.target, DATA_ACTION);\n        }\n        if (!REGEXP_ACTIONS.test(action)) {\n            return;\n        }\n        if (dispatchEvent(this.element, EVENT_CROP_START, {\n            originalEvent: event,\n            action: action\n        }) === false) {\n            return;\n        }\n        // This line is required for preventing page zooming in iOS browsers\n        event.preventDefault();\n        this.action = action;\n        this.cropping = false;\n        if (action === ACTION_CROP) {\n            this.cropping = true;\n            addClass(this.dragBox, CLASS_MODAL);\n        }\n    },\n    cropMove: function cropMove(event) {\n        var action = this.action;\n        if (this.disabled || !action) {\n            return;\n        }\n        var pointers = this.pointers;\n        event.preventDefault();\n        if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\n            originalEvent: event,\n            action: action\n        }) === false) {\n            return;\n        }\n        if (event.changedTouches) {\n            forEach(event.changedTouches, function(touch) {\n                // The first parameter should not be undefined (#432)\n                assign(pointers[touch.identifier] || {}, getPointer(touch, true));\n            });\n        } else {\n            assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));\n        }\n        this.change(event);\n    },\n    cropEnd: function cropEnd(event) {\n        if (this.disabled) {\n            return;\n        }\n        var action = this.action, pointers = this.pointers;\n        if (event.changedTouches) {\n            forEach(event.changedTouches, function(touch) {\n                delete pointers[touch.identifier];\n            });\n        } else {\n            delete pointers[event.pointerId || 0];\n        }\n        if (!action) {\n            return;\n        }\n        event.preventDefault();\n        if (!Object.keys(pointers).length) {\n            this.action = \"\";\n        }\n        if (this.cropping) {\n            this.cropping = false;\n            toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\n        }\n        dispatchEvent(this.element, EVENT_CROP_END, {\n            originalEvent: event,\n            action: action\n        });\n    }\n};\nvar change = {\n    change: function change(event) {\n        var options = this.options, canvasData = this.canvasData, containerData = this.containerData, cropBoxData = this.cropBoxData, pointers = this.pointers;\n        var action = this.action;\n        var aspectRatio = options.aspectRatio;\n        var left = cropBoxData.left, top = cropBoxData.top, width = cropBoxData.width, height = cropBoxData.height;\n        var right = left + width;\n        var bottom = top + height;\n        var minLeft = 0;\n        var minTop = 0;\n        var maxWidth = containerData.width;\n        var maxHeight = containerData.height;\n        var renderable = true;\n        var offset;\n        // Locking aspect ratio in \"free mode\" by holding shift key\n        if (!aspectRatio && event.shiftKey) {\n            aspectRatio = width && height ? width / height : 1;\n        }\n        if (this.limited) {\n            minLeft = cropBoxData.minLeft;\n            minTop = cropBoxData.minTop;\n            maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n            maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n        }\n        var pointer = pointers[Object.keys(pointers)[0]];\n        var range = {\n            x: pointer.endX - pointer.startX,\n            y: pointer.endY - pointer.startY\n        };\n        var check = function check(side) {\n            switch(side){\n                case ACTION_EAST:\n                    if (right + range.x > maxWidth) {\n                        range.x = maxWidth - right;\n                    }\n                    break;\n                case ACTION_WEST:\n                    if (left + range.x < minLeft) {\n                        range.x = minLeft - left;\n                    }\n                    break;\n                case ACTION_NORTH:\n                    if (top + range.y < minTop) {\n                        range.y = minTop - top;\n                    }\n                    break;\n                case ACTION_SOUTH:\n                    if (bottom + range.y > maxHeight) {\n                        range.y = maxHeight - bottom;\n                    }\n                    break;\n            }\n        };\n        switch(action){\n            // Move crop box\n            case ACTION_ALL:\n                left += range.x;\n                top += range.y;\n                break;\n            // Resize crop box\n            case ACTION_EAST:\n                if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n                    renderable = false;\n                    break;\n                }\n                check(ACTION_EAST);\n                width += range.x;\n                if (width < 0) {\n                    action = ACTION_WEST;\n                    width = -width;\n                    left -= width;\n                }\n                if (aspectRatio) {\n                    height = width / aspectRatio;\n                    top += (cropBoxData.height - height) / 2;\n                }\n                break;\n            case ACTION_NORTH:\n                if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n                    renderable = false;\n                    break;\n                }\n                check(ACTION_NORTH);\n                height -= range.y;\n                top += range.y;\n                if (height < 0) {\n                    action = ACTION_SOUTH;\n                    height = -height;\n                    top -= height;\n                }\n                if (aspectRatio) {\n                    width = height * aspectRatio;\n                    left += (cropBoxData.width - width) / 2;\n                }\n                break;\n            case ACTION_WEST:\n                if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n                    renderable = false;\n                    break;\n                }\n                check(ACTION_WEST);\n                width -= range.x;\n                left += range.x;\n                if (width < 0) {\n                    action = ACTION_EAST;\n                    width = -width;\n                    left -= width;\n                }\n                if (aspectRatio) {\n                    height = width / aspectRatio;\n                    top += (cropBoxData.height - height) / 2;\n                }\n                break;\n            case ACTION_SOUTH:\n                if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n                    renderable = false;\n                    break;\n                }\n                check(ACTION_SOUTH);\n                height += range.y;\n                if (height < 0) {\n                    action = ACTION_NORTH;\n                    height = -height;\n                    top -= height;\n                }\n                if (aspectRatio) {\n                    width = height * aspectRatio;\n                    left += (cropBoxData.width - width) / 2;\n                }\n                break;\n            case ACTION_NORTH_EAST:\n                if (aspectRatio) {\n                    if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(ACTION_NORTH);\n                    height -= range.y;\n                    top += range.y;\n                    width = height * aspectRatio;\n                } else {\n                    check(ACTION_NORTH);\n                    check(ACTION_EAST);\n                    if (range.x >= 0) {\n                        if (right < maxWidth) {\n                            width += range.x;\n                        } else if (range.y <= 0 && top <= minTop) {\n                            renderable = false;\n                        }\n                    } else {\n                        width += range.x;\n                    }\n                    if (range.y <= 0) {\n                        if (top > minTop) {\n                            height -= range.y;\n                            top += range.y;\n                        }\n                    } else {\n                        height -= range.y;\n                        top += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = ACTION_SOUTH_WEST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = ACTION_NORTH_WEST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = ACTION_SOUTH_EAST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case ACTION_NORTH_WEST:\n                if (aspectRatio) {\n                    if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(ACTION_NORTH);\n                    height -= range.y;\n                    top += range.y;\n                    width = height * aspectRatio;\n                    left += cropBoxData.width - width;\n                } else {\n                    check(ACTION_NORTH);\n                    check(ACTION_WEST);\n                    if (range.x <= 0) {\n                        if (left > minLeft) {\n                            width -= range.x;\n                            left += range.x;\n                        } else if (range.y <= 0 && top <= minTop) {\n                            renderable = false;\n                        }\n                    } else {\n                        width -= range.x;\n                        left += range.x;\n                    }\n                    if (range.y <= 0) {\n                        if (top > minTop) {\n                            height -= range.y;\n                            top += range.y;\n                        }\n                    } else {\n                        height -= range.y;\n                        top += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = ACTION_SOUTH_EAST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = ACTION_NORTH_EAST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = ACTION_SOUTH_WEST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case ACTION_SOUTH_WEST:\n                if (aspectRatio) {\n                    if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(ACTION_WEST);\n                    width -= range.x;\n                    left += range.x;\n                    height = width / aspectRatio;\n                } else {\n                    check(ACTION_SOUTH);\n                    check(ACTION_WEST);\n                    if (range.x <= 0) {\n                        if (left > minLeft) {\n                            width -= range.x;\n                            left += range.x;\n                        } else if (range.y >= 0 && bottom >= maxHeight) {\n                            renderable = false;\n                        }\n                    } else {\n                        width -= range.x;\n                        left += range.x;\n                    }\n                    if (range.y >= 0) {\n                        if (bottom < maxHeight) {\n                            height += range.y;\n                        }\n                    } else {\n                        height += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = ACTION_NORTH_EAST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = ACTION_SOUTH_EAST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = ACTION_NORTH_WEST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            case ACTION_SOUTH_EAST:\n                if (aspectRatio) {\n                    if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n                        renderable = false;\n                        break;\n                    }\n                    check(ACTION_EAST);\n                    width += range.x;\n                    height = width / aspectRatio;\n                } else {\n                    check(ACTION_SOUTH);\n                    check(ACTION_EAST);\n                    if (range.x >= 0) {\n                        if (right < maxWidth) {\n                            width += range.x;\n                        } else if (range.y >= 0 && bottom >= maxHeight) {\n                            renderable = false;\n                        }\n                    } else {\n                        width += range.x;\n                    }\n                    if (range.y >= 0) {\n                        if (bottom < maxHeight) {\n                            height += range.y;\n                        }\n                    } else {\n                        height += range.y;\n                    }\n                }\n                if (width < 0 && height < 0) {\n                    action = ACTION_NORTH_WEST;\n                    height = -height;\n                    width = -width;\n                    top -= height;\n                    left -= width;\n                } else if (width < 0) {\n                    action = ACTION_SOUTH_WEST;\n                    width = -width;\n                    left -= width;\n                } else if (height < 0) {\n                    action = ACTION_NORTH_EAST;\n                    height = -height;\n                    top -= height;\n                }\n                break;\n            // Move canvas\n            case ACTION_MOVE:\n                this.move(range.x, range.y);\n                renderable = false;\n                break;\n            // Zoom canvas\n            case ACTION_ZOOM:\n                this.zoom(getMaxZoomRatio(pointers), event);\n                renderable = false;\n                break;\n            // Create crop box\n            case ACTION_CROP:\n                if (!range.x || !range.y) {\n                    renderable = false;\n                    break;\n                }\n                offset = getOffset(this.cropper);\n                left = pointer.startX - offset.left;\n                top = pointer.startY - offset.top;\n                width = cropBoxData.minWidth;\n                height = cropBoxData.minHeight;\n                if (range.x > 0) {\n                    action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n                } else if (range.x < 0) {\n                    left -= width;\n                    action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n                }\n                if (range.y < 0) {\n                    top -= height;\n                }\n                // Show the crop box if is hidden\n                if (!this.cropped) {\n                    removeClass(this.cropBox, CLASS_HIDDEN);\n                    this.cropped = true;\n                    if (this.limited) {\n                        this.limitCropBox(true, true);\n                    }\n                }\n                break;\n        }\n        if (renderable) {\n            cropBoxData.width = width;\n            cropBoxData.height = height;\n            cropBoxData.left = left;\n            cropBoxData.top = top;\n            this.action = action;\n            this.renderCropBox();\n        }\n        // Override\n        forEach(pointers, function(p) {\n            p.startX = p.endX;\n            p.startY = p.endY;\n        });\n    }\n};\nvar methods = {\n    // Show the crop box manually\n    crop: function crop() {\n        if (this.ready && !this.cropped && !this.disabled) {\n            this.cropped = true;\n            this.limitCropBox(true, true);\n            if (this.options.modal) {\n                addClass(this.dragBox, CLASS_MODAL);\n            }\n            removeClass(this.cropBox, CLASS_HIDDEN);\n            this.setCropBoxData(this.initialCropBoxData);\n        }\n        return this;\n    },\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n        if (this.ready && !this.disabled) {\n            this.imageData = assign({}, this.initialImageData);\n            this.canvasData = assign({}, this.initialCanvasData);\n            this.cropBoxData = assign({}, this.initialCropBoxData);\n            this.renderCanvas();\n            if (this.cropped) {\n                this.renderCropBox();\n            }\n        }\n        return this;\n    },\n    // Clear the crop box\n    clear: function clear() {\n        if (this.cropped && !this.disabled) {\n            assign(this.cropBoxData, {\n                left: 0,\n                top: 0,\n                width: 0,\n                height: 0\n            });\n            this.cropped = false;\n            this.renderCropBox();\n            this.limitCanvas(true, true);\n            // Render canvas after crop box rendered\n            this.renderCanvas();\n            removeClass(this.dragBox, CLASS_MODAL);\n            addClass(this.cropBox, CLASS_HIDDEN);\n        }\n        return this;\n    },\n    /**\n   * Replace the image's src and rebuild the cropper\n   * @param {string} url - The new URL.\n   * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\n   * @returns {Cropper} this\n   */ replace: function replace(url) {\n        var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (!this.disabled && url) {\n            if (this.isImg) {\n                this.element.src = url;\n            }\n            if (hasSameSize) {\n                this.url = url;\n                this.image.src = url;\n                if (this.ready) {\n                    this.viewBoxImage.src = url;\n                    forEach(this.previews, function(element) {\n                        element.getElementsByTagName(\"img\")[0].src = url;\n                    });\n                }\n            } else {\n                if (this.isImg) {\n                    this.replaced = true;\n                }\n                this.options.data = null;\n                this.uncreate();\n                this.load(url);\n            }\n        }\n        return this;\n    },\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n        if (this.ready && this.disabled) {\n            this.disabled = false;\n            removeClass(this.cropper, CLASS_DISABLED);\n        }\n        return this;\n    },\n    // Disable (freeze) the cropper\n    disable: function disable() {\n        if (this.ready && !this.disabled) {\n            this.disabled = true;\n            addClass(this.cropper, CLASS_DISABLED);\n        }\n        return this;\n    },\n    /**\n   * Destroy the cropper and remove the instance from the image\n   * @returns {Cropper} this\n   */ destroy: function destroy() {\n        var element = this.element;\n        if (!element[NAMESPACE]) {\n            return this;\n        }\n        element[NAMESPACE] = undefined;\n        if (this.isImg && this.replaced) {\n            element.src = this.originalUrl;\n        }\n        this.uncreate();\n        return this;\n    },\n    /**\n   * Move the canvas with relative offsets\n   * @param {number} offsetX - The relative offset distance on the x-axis.\n   * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\n   * @returns {Cropper} this\n   */ move: function move(offsetX) {\n        var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\n        var _this$canvasData = this.canvasData, left = _this$canvasData.left, top = _this$canvasData.top;\n        return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n    },\n    /**\n   * Move the canvas to an absolute point\n   * @param {number} x - The x-axis coordinate.\n   * @param {number} [y=x] - The y-axis coordinate.\n   * @returns {Cropper} this\n   */ moveTo: function moveTo(x) {\n        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n        var canvasData = this.canvasData;\n        var changed = false;\n        x = Number(x);\n        y = Number(y);\n        if (this.ready && !this.disabled && this.options.movable) {\n            if (isNumber(x)) {\n                canvasData.left = x;\n                changed = true;\n            }\n            if (isNumber(y)) {\n                canvasData.top = y;\n                changed = true;\n            }\n            if (changed) {\n                this.renderCanvas(true);\n            }\n        }\n        return this;\n    },\n    /**\n   * Zoom the canvas with a relative ratio\n   * @param {number} ratio - The target ratio.\n   * @param {Event} _originalEvent - The original event if any.\n   * @returns {Cropper} this\n   */ zoom: function zoom(ratio, _originalEvent) {\n        var canvasData = this.canvasData;\n        ratio = Number(ratio);\n        if (ratio < 0) {\n            ratio = 1 / (1 - ratio);\n        } else {\n            ratio = 1 + ratio;\n        }\n        return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n    },\n    /**\n   * Zoom the canvas to an absolute ratio\n   * @param {number} ratio - The target ratio.\n   * @param {Object} pivot - The zoom pivot point coordinate.\n   * @param {Event} _originalEvent - The original event if any.\n   * @returns {Cropper} this\n   */ zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\n        var options = this.options, canvasData = this.canvasData;\n        var width = canvasData.width, height = canvasData.height, naturalWidth = canvasData.naturalWidth, naturalHeight = canvasData.naturalHeight;\n        ratio = Number(ratio);\n        if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n            var newWidth = naturalWidth * ratio;\n            var newHeight = naturalHeight * ratio;\n            if (dispatchEvent(this.element, EVENT_ZOOM, {\n                ratio: ratio,\n                oldRatio: width / naturalWidth,\n                originalEvent: _originalEvent\n            }) === false) {\n                return this;\n            }\n            if (_originalEvent) {\n                var pointers = this.pointers;\n                var offset = getOffset(this.cropper);\n                var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n                    pageX: _originalEvent.pageX,\n                    pageY: _originalEvent.pageY\n                };\n                // Zoom from the triggering point of the event\n                canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n                canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n            } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\n                canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n                canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n            } else {\n                // Zoom from the center of the canvas\n                canvasData.left -= (newWidth - width) / 2;\n                canvasData.top -= (newHeight - height) / 2;\n            }\n            canvasData.width = newWidth;\n            canvasData.height = newHeight;\n            this.renderCanvas(true);\n        }\n        return this;\n    },\n    /**\n   * Rotate the canvas with a relative degree\n   * @param {number} degree - The rotate degree.\n   * @returns {Cropper} this\n   */ rotate: function rotate(degree) {\n        return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n    },\n    /**\n   * Rotate the canvas to an absolute degree\n   * @param {number} degree - The rotate degree.\n   * @returns {Cropper} this\n   */ rotateTo: function rotateTo(degree) {\n        degree = Number(degree);\n        if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n            this.imageData.rotate = degree % 360;\n            this.renderCanvas(true, true);\n        }\n        return this;\n    },\n    /**\n   * Scale the image on the x-axis.\n   * @param {number} scaleX - The scale ratio on the x-axis.\n   * @returns {Cropper} this\n   */ scaleX: function scaleX(_scaleX) {\n        var scaleY = this.imageData.scaleY;\n        return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n    /**\n   * Scale the image on the y-axis.\n   * @param {number} scaleY - The scale ratio on the y-axis.\n   * @returns {Cropper} this\n   */ scaleY: function scaleY(_scaleY) {\n        var scaleX = this.imageData.scaleX;\n        return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n    /**\n   * Scale the image\n   * @param {number} scaleX - The scale ratio on the x-axis.\n   * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\n   * @returns {Cropper} this\n   */ scale: function scale(scaleX) {\n        var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n        var imageData = this.imageData;\n        var transformed = false;\n        scaleX = Number(scaleX);\n        scaleY = Number(scaleY);\n        if (this.ready && !this.disabled && this.options.scalable) {\n            if (isNumber(scaleX)) {\n                imageData.scaleX = scaleX;\n                transformed = true;\n            }\n            if (isNumber(scaleY)) {\n                imageData.scaleY = scaleY;\n                transformed = true;\n            }\n            if (transformed) {\n                this.renderCanvas(true, true);\n            }\n        }\n        return this;\n    },\n    /**\n   * Get the cropped area position and size data (base on the original image)\n   * @param {boolean} [rounded=false] - Indicate if round the data values or not.\n   * @returns {Object} The result cropped data.\n   */ getData: function getData() {\n        var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var options = this.options, imageData = this.imageData, canvasData = this.canvasData, cropBoxData = this.cropBoxData;\n        var data;\n        if (this.ready && this.cropped) {\n            data = {\n                x: cropBoxData.left - canvasData.left,\n                y: cropBoxData.top - canvasData.top,\n                width: cropBoxData.width,\n                height: cropBoxData.height\n            };\n            var ratio = imageData.width / imageData.naturalWidth;\n            forEach(data, function(n, i) {\n                data[i] = n / ratio;\n            });\n            if (rounded) {\n                // In case rounding off leads to extra 1px in right or bottom border\n                // we should round the top-left corner and the dimension (#343).\n                var bottom = Math.round(data.y + data.height);\n                var right = Math.round(data.x + data.width);\n                data.x = Math.round(data.x);\n                data.y = Math.round(data.y);\n                data.width = right - data.x;\n                data.height = bottom - data.y;\n            }\n        } else {\n            data = {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0\n            };\n        }\n        if (options.rotatable) {\n            data.rotate = imageData.rotate || 0;\n        }\n        if (options.scalable) {\n            data.scaleX = imageData.scaleX || 1;\n            data.scaleY = imageData.scaleY || 1;\n        }\n        return data;\n    },\n    /**\n   * Set the cropped area position and size with new data\n   * @param {Object} data - The new data.\n   * @returns {Cropper} this\n   */ setData: function setData(data) {\n        var options = this.options, imageData = this.imageData, canvasData = this.canvasData;\n        var cropBoxData = {};\n        if (this.ready && !this.disabled && isPlainObject(data)) {\n            var transformed = false;\n            if (options.rotatable) {\n                if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n                    imageData.rotate = data.rotate;\n                    transformed = true;\n                }\n            }\n            if (options.scalable) {\n                if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n                    imageData.scaleX = data.scaleX;\n                    transformed = true;\n                }\n                if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n                    imageData.scaleY = data.scaleY;\n                    transformed = true;\n                }\n            }\n            if (transformed) {\n                this.renderCanvas(true, true);\n            }\n            var ratio = imageData.width / imageData.naturalWidth;\n            if (isNumber(data.x)) {\n                cropBoxData.left = data.x * ratio + canvasData.left;\n            }\n            if (isNumber(data.y)) {\n                cropBoxData.top = data.y * ratio + canvasData.top;\n            }\n            if (isNumber(data.width)) {\n                cropBoxData.width = data.width * ratio;\n            }\n            if (isNumber(data.height)) {\n                cropBoxData.height = data.height * ratio;\n            }\n            this.setCropBoxData(cropBoxData);\n        }\n        return this;\n    },\n    /**\n   * Get the container size data.\n   * @returns {Object} The result container data.\n   */ getContainerData: function getContainerData() {\n        return this.ready ? assign({}, this.containerData) : {};\n    },\n    /**\n   * Get the image position and size data.\n   * @returns {Object} The result image data.\n   */ getImageData: function getImageData() {\n        return this.sized ? assign({}, this.imageData) : {};\n    },\n    /**\n   * Get the canvas position and size data.\n   * @returns {Object} The result canvas data.\n   */ getCanvasData: function getCanvasData() {\n        var canvasData = this.canvasData;\n        var data = {};\n        if (this.ready) {\n            forEach([\n                \"left\",\n                \"top\",\n                \"width\",\n                \"height\",\n                \"naturalWidth\",\n                \"naturalHeight\"\n            ], function(n) {\n                data[n] = canvasData[n];\n            });\n        }\n        return data;\n    },\n    /**\n   * Set the canvas position and size with new data.\n   * @param {Object} data - The new canvas data.\n   * @returns {Cropper} this\n   */ setCanvasData: function setCanvasData(data) {\n        var canvasData = this.canvasData;\n        var aspectRatio = canvasData.aspectRatio;\n        if (this.ready && !this.disabled && isPlainObject(data)) {\n            if (isNumber(data.left)) {\n                canvasData.left = data.left;\n            }\n            if (isNumber(data.top)) {\n                canvasData.top = data.top;\n            }\n            if (isNumber(data.width)) {\n                canvasData.width = data.width;\n                canvasData.height = data.width / aspectRatio;\n            } else if (isNumber(data.height)) {\n                canvasData.height = data.height;\n                canvasData.width = data.height * aspectRatio;\n            }\n            this.renderCanvas(true);\n        }\n        return this;\n    },\n    /**\n   * Get the crop box position and size data.\n   * @returns {Object} The result crop box data.\n   */ getCropBoxData: function getCropBoxData() {\n        var cropBoxData = this.cropBoxData;\n        var data;\n        if (this.ready && this.cropped) {\n            data = {\n                left: cropBoxData.left,\n                top: cropBoxData.top,\n                width: cropBoxData.width,\n                height: cropBoxData.height\n            };\n        }\n        return data || {};\n    },\n    /**\n   * Set the crop box position and size with new data.\n   * @param {Object} data - The new crop box data.\n   * @returns {Cropper} this\n   */ setCropBoxData: function setCropBoxData(data) {\n        var cropBoxData = this.cropBoxData;\n        var aspectRatio = this.options.aspectRatio;\n        var widthChanged;\n        var heightChanged;\n        if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\n            if (isNumber(data.left)) {\n                cropBoxData.left = data.left;\n            }\n            if (isNumber(data.top)) {\n                cropBoxData.top = data.top;\n            }\n            if (isNumber(data.width) && data.width !== cropBoxData.width) {\n                widthChanged = true;\n                cropBoxData.width = data.width;\n            }\n            if (isNumber(data.height) && data.height !== cropBoxData.height) {\n                heightChanged = true;\n                cropBoxData.height = data.height;\n            }\n            if (aspectRatio) {\n                if (widthChanged) {\n                    cropBoxData.height = cropBoxData.width / aspectRatio;\n                } else if (heightChanged) {\n                    cropBoxData.width = cropBoxData.height * aspectRatio;\n                }\n            }\n            this.renderCropBox();\n        }\n        return this;\n    },\n    /**\n   * Get a canvas drawn the cropped image.\n   * @param {Object} [options={}] - The config options.\n   * @returns {HTMLCanvasElement} - The result canvas.\n   */ getCroppedCanvas: function getCroppedCanvas() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!this.ready || !window.HTMLCanvasElement) {\n            return null;\n        }\n        var canvasData = this.canvasData;\n        var source = getSourceCanvas(this.image, this.imageData, canvasData, options);\n        // Returns the source canvas if it is not cropped.\n        if (!this.cropped) {\n            return source;\n        }\n        var _this$getData = this.getData(options.rounded), initialX = _this$getData.x, initialY = _this$getData.y, initialWidth = _this$getData.width, initialHeight = _this$getData.height;\n        var ratio = source.width / Math.floor(canvasData.naturalWidth);\n        if (ratio !== 1) {\n            initialX *= ratio;\n            initialY *= ratio;\n            initialWidth *= ratio;\n            initialHeight *= ratio;\n        }\n        var aspectRatio = initialWidth / initialHeight;\n        var maxSizes = getAdjustedSizes({\n            aspectRatio: aspectRatio,\n            width: options.maxWidth || Infinity,\n            height: options.maxHeight || Infinity\n        });\n        var minSizes = getAdjustedSizes({\n            aspectRatio: aspectRatio,\n            width: options.minWidth || 0,\n            height: options.minHeight || 0\n        }, \"cover\");\n        var _getAdjustedSizes = getAdjustedSizes({\n            aspectRatio: aspectRatio,\n            width: options.width || (ratio !== 1 ? source.width : initialWidth),\n            height: options.height || (ratio !== 1 ? source.height : initialHeight)\n        }), width = _getAdjustedSizes.width, height = _getAdjustedSizes.height;\n        width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n        height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n        var canvas = document.createElement(\"canvas\");\n        var context = canvas.getContext(\"2d\");\n        canvas.width = normalizeDecimalNumber(width);\n        canvas.height = normalizeDecimalNumber(height);\n        context.fillStyle = options.fillColor || \"transparent\";\n        context.fillRect(0, 0, width, height);\n        var _options$imageSmoothi = options.imageSmoothingEnabled, imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi, imageSmoothingQuality = options.imageSmoothingQuality;\n        context.imageSmoothingEnabled = imageSmoothingEnabled;\n        if (imageSmoothingQuality) {\n            context.imageSmoothingQuality = imageSmoothingQuality;\n        }\n        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n        var sourceWidth = source.width;\n        var sourceHeight = source.height;\n        // Source canvas parameters\n        var srcX = initialX;\n        var srcY = initialY;\n        var srcWidth;\n        var srcHeight;\n        // Destination canvas parameters\n        var dstX;\n        var dstY;\n        var dstWidth;\n        var dstHeight;\n        if (srcX <= -initialWidth || srcX > sourceWidth) {\n            srcX = 0;\n            srcWidth = 0;\n            dstX = 0;\n            dstWidth = 0;\n        } else if (srcX <= 0) {\n            dstX = -srcX;\n            srcX = 0;\n            srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n            dstWidth = srcWidth;\n        } else if (srcX <= sourceWidth) {\n            dstX = 0;\n            srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n            dstWidth = srcWidth;\n        }\n        if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n            srcY = 0;\n            srcHeight = 0;\n            dstY = 0;\n            dstHeight = 0;\n        } else if (srcY <= 0) {\n            dstY = -srcY;\n            srcY = 0;\n            srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n            dstHeight = srcHeight;\n        } else if (srcY <= sourceHeight) {\n            dstY = 0;\n            srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n            dstHeight = srcHeight;\n        }\n        var params = [\n            srcX,\n            srcY,\n            srcWidth,\n            srcHeight\n        ];\n        // Avoid \"IndexSizeError\"\n        if (dstWidth > 0 && dstHeight > 0) {\n            var scale = width / initialWidth;\n            params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n        }\n        // All the numerical parameters should be integer for `drawImage`\n        // https://github.com/fengyuanchen/cropper/issues/476\n        context.drawImage.apply(context, [\n            source\n        ].concat(_toConsumableArray(params.map(function(param) {\n            return Math.floor(normalizeDecimalNumber(param));\n        }))));\n        return canvas;\n    },\n    /**\n   * Change the aspect ratio of the crop box.\n   * @param {number} aspectRatio - The new aspect ratio.\n   * @returns {Cropper} this\n   */ setAspectRatio: function setAspectRatio(aspectRatio) {\n        var options = this.options;\n        if (!this.disabled && !isUndefined(aspectRatio)) {\n            // 0 -> NaN\n            options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n            if (this.ready) {\n                this.initCropBox();\n                if (this.cropped) {\n                    this.renderCropBox();\n                }\n            }\n        }\n        return this;\n    },\n    /**\n   * Change the drag mode.\n   * @param {string} mode - The new drag mode.\n   * @returns {Cropper} this\n   */ setDragMode: function setDragMode(mode) {\n        var options = this.options, dragBox = this.dragBox, face = this.face;\n        if (this.ready && !this.disabled) {\n            var croppable = mode === DRAG_MODE_CROP;\n            var movable = options.movable && mode === DRAG_MODE_MOVE;\n            mode = croppable || movable ? mode : DRAG_MODE_NONE;\n            options.dragMode = mode;\n            setData(dragBox, DATA_ACTION, mode);\n            toggleClass(dragBox, CLASS_CROP, croppable);\n            toggleClass(dragBox, CLASS_MOVE, movable);\n            if (!options.cropBoxMovable) {\n                // Sync drag mode to crop box when it is not movable\n                setData(face, DATA_ACTION, mode);\n                toggleClass(face, CLASS_CROP, croppable);\n                toggleClass(face, CLASS_MOVE, movable);\n            }\n        }\n        return this;\n    }\n};\nvar AnotherCropper = WINDOW.Cropper;\nvar Cropper = /*#__PURE__*/ function() {\n    /**\n   * Create a new Cropper.\n   * @param {Element} element - The target element for cropping.\n   * @param {Object} [options={}] - The configuration options.\n   */ function Cropper(element) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        _classCallCheck(this, Cropper);\n        if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\n            throw new Error(\"The first argument is required and must be an <img> or <canvas> element.\");\n        }\n        this.element = element;\n        this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\n        this.cropped = false;\n        this.disabled = false;\n        this.pointers = {};\n        this.ready = false;\n        this.reloading = false;\n        this.replaced = false;\n        this.sized = false;\n        this.sizing = false;\n        this.init();\n    }\n    _createClass(Cropper, [\n        {\n            key: \"init\",\n            value: function init() {\n                var element = this.element;\n                var tagName = element.tagName.toLowerCase();\n                var url;\n                if (element[NAMESPACE]) {\n                    return;\n                }\n                element[NAMESPACE] = this;\n                if (tagName === \"img\") {\n                    this.isImg = true;\n                    // e.g.: \"img/picture.jpg\"\n                    url = element.getAttribute(\"src\") || \"\";\n                    this.originalUrl = url;\n                    // Stop when it's a blank image\n                    if (!url) {\n                        return;\n                    }\n                    // e.g.: \"https://example.com/img/picture.jpg\"\n                    url = element.src;\n                } else if (tagName === \"canvas\" && window.HTMLCanvasElement) {\n                    url = element.toDataURL();\n                }\n                this.load(url);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this = this;\n                if (!url) {\n                    return;\n                }\n                this.url = url;\n                this.imageData = {};\n                var element = this.element, options = this.options;\n                if (!options.rotatable && !options.scalable) {\n                    options.checkOrientation = false;\n                }\n                // Only IE10+ supports Typed Arrays\n                if (!options.checkOrientation || !window.ArrayBuffer) {\n                    this.clone();\n                    return;\n                }\n                // Detect the mime type of the image directly if it is a Data URL\n                if (REGEXP_DATA_URL.test(url)) {\n                    // Read ArrayBuffer from Data URL of JPEG images directly for better performance\n                    if (REGEXP_DATA_URL_JPEG.test(url)) {\n                        this.read(dataURLToArrayBuffer(url));\n                    } else {\n                        // Only a JPEG image may contains Exif Orientation information,\n                        // the rest types of Data URLs are not necessary to check orientation at all.\n                        this.clone();\n                    }\n                    return;\n                }\n                // 1. Detect the mime type of the image by a XMLHttpRequest.\n                // 2. Load the image as ArrayBuffer for reading orientation if its a JPEG image.\n                var xhr = new XMLHttpRequest();\n                var clone = this.clone.bind(this);\n                this.reloading = true;\n                this.xhr = xhr;\n                // 1. Cross origin requests are only supported for protocol schemes:\n                // http, https, data, chrome, chrome-extension.\n                // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy\n                // in some browsers as IE11 and Safari.\n                xhr.onabort = clone;\n                xhr.onerror = clone;\n                xhr.ontimeout = clone;\n                xhr.onprogress = function() {\n                    // Abort the request directly if it not a JPEG image for better performance\n                    if (xhr.getResponseHeader(\"content-type\") !== MIME_TYPE_JPEG) {\n                        xhr.abort();\n                    }\n                };\n                xhr.onload = function() {\n                    _this.read(xhr.response);\n                };\n                xhr.onloadend = function() {\n                    _this.reloading = false;\n                    _this.xhr = null;\n                };\n                // Bust cache when there is a \"crossOrigin\" property to avoid browser cache error\n                if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n                    url = addTimestamp(url);\n                }\n                // The third parameter is required for avoiding side-effect (#682)\n                xhr.open(\"GET\", url, true);\n                xhr.responseType = \"arraybuffer\";\n                xhr.withCredentials = element.crossOrigin === \"use-credentials\";\n                xhr.send();\n            }\n        },\n        {\n            key: \"read\",\n            value: function read(arrayBuffer) {\n                var options = this.options, imageData = this.imageData;\n                // Reset the orientation value to its default value 1\n                // as some iOS browsers will render image with its orientation\n                var orientation = resetAndGetOrientation(arrayBuffer);\n                var rotate = 0;\n                var scaleX = 1;\n                var scaleY = 1;\n                if (orientation > 1) {\n                    // Generate a new URL which has the default orientation value\n                    this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);\n                    var _parseOrientation = parseOrientation(orientation);\n                    rotate = _parseOrientation.rotate;\n                    scaleX = _parseOrientation.scaleX;\n                    scaleY = _parseOrientation.scaleY;\n                }\n                if (options.rotatable) {\n                    imageData.rotate = rotate;\n                }\n                if (options.scalable) {\n                    imageData.scaleX = scaleX;\n                    imageData.scaleY = scaleY;\n                }\n                this.clone();\n            }\n        },\n        {\n            key: \"clone\",\n            value: function clone() {\n                var element = this.element, url = this.url;\n                var crossOrigin = element.crossOrigin;\n                var crossOriginUrl = url;\n                if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n                    if (!crossOrigin) {\n                        crossOrigin = \"anonymous\";\n                    }\n                    // Bust cache when there is not a \"crossOrigin\" property (#519)\n                    crossOriginUrl = addTimestamp(url);\n                }\n                this.crossOrigin = crossOrigin;\n                this.crossOriginUrl = crossOriginUrl;\n                var image = document.createElement(\"img\");\n                if (crossOrigin) {\n                    image.crossOrigin = crossOrigin;\n                }\n                image.src = crossOriginUrl || url;\n                image.alt = element.alt || \"The image to crop\";\n                this.image = image;\n                image.onload = this.start.bind(this);\n                image.onerror = this.stop.bind(this);\n                addClass(image, CLASS_HIDE);\n                element.parentNode.insertBefore(image, element.nextSibling);\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                var _this2 = this;\n                var image = this.image;\n                image.onload = null;\n                image.onerror = null;\n                this.sizing = true;\n                // Match all browsers that use WebKit as the layout engine in iOS devices,\n                // such as Safari for iOS, Chrome for iOS, and in-app browsers.\n                var isIOSWebKit = WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent);\n                var done = function done(naturalWidth, naturalHeight) {\n                    assign(_this2.imageData, {\n                        naturalWidth: naturalWidth,\n                        naturalHeight: naturalHeight,\n                        aspectRatio: naturalWidth / naturalHeight\n                    });\n                    _this2.initialImageData = assign({}, _this2.imageData);\n                    _this2.sizing = false;\n                    _this2.sized = true;\n                    _this2.build();\n                };\n                // Most modern browsers (excepts iOS WebKit)\n                if (image.naturalWidth && !isIOSWebKit) {\n                    done(image.naturalWidth, image.naturalHeight);\n                    return;\n                }\n                var sizingImage = document.createElement(\"img\");\n                var body = document.body || document.documentElement;\n                this.sizingImage = sizingImage;\n                sizingImage.onload = function() {\n                    done(sizingImage.width, sizingImage.height);\n                    if (!isIOSWebKit) {\n                        body.removeChild(sizingImage);\n                    }\n                };\n                sizingImage.src = image.src;\n                // iOS WebKit will convert the image automatically\n                // with its orientation once append it into DOM (#279)\n                if (!isIOSWebKit) {\n                    sizingImage.style.cssText = \"left:0;\" + \"max-height:none!important;\" + \"max-width:none!important;\" + \"min-height:0!important;\" + \"min-width:0!important;\" + \"opacity:0;\" + \"position:absolute;\" + \"top:0;\" + \"z-index:-1;\";\n                    body.appendChild(sizingImage);\n                }\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                var image = this.image;\n                image.onload = null;\n                image.onerror = null;\n                image.parentNode.removeChild(image);\n                this.image = null;\n            }\n        },\n        {\n            key: \"build\",\n            value: function build() {\n                if (!this.sized || this.ready) {\n                    return;\n                }\n                var element = this.element, options = this.options, image = this.image;\n                // Create cropper elements\n                var container = element.parentNode;\n                var template = document.createElement(\"div\");\n                template.innerHTML = TEMPLATE;\n                var cropper = template.querySelector(\".\".concat(NAMESPACE, \"-container\"));\n                var canvas = cropper.querySelector(\".\".concat(NAMESPACE, \"-canvas\"));\n                var dragBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-drag-box\"));\n                var cropBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-crop-box\"));\n                var face = cropBox.querySelector(\".\".concat(NAMESPACE, \"-face\"));\n                this.container = container;\n                this.cropper = cropper;\n                this.canvas = canvas;\n                this.dragBox = dragBox;\n                this.cropBox = cropBox;\n                this.viewBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-view-box\"));\n                this.face = face;\n                canvas.appendChild(image);\n                // Hide the original image\n                addClass(element, CLASS_HIDDEN);\n                // Inserts the cropper after to the current image\n                container.insertBefore(cropper, element.nextSibling);\n                // Show the hidden image\n                removeClass(image, CLASS_HIDE);\n                this.initPreview();\n                this.bind();\n                options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n                options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n                options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n                addClass(cropBox, CLASS_HIDDEN);\n                if (!options.guides) {\n                    addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-dashed\")), CLASS_HIDDEN);\n                }\n                if (!options.center) {\n                    addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-center\")), CLASS_HIDDEN);\n                }\n                if (options.background) {\n                    addClass(cropper, \"\".concat(NAMESPACE, \"-bg\"));\n                }\n                if (!options.highlight) {\n                    addClass(face, CLASS_INVISIBLE);\n                }\n                if (options.cropBoxMovable) {\n                    addClass(face, CLASS_MOVE);\n                    setData(face, DATA_ACTION, ACTION_ALL);\n                }\n                if (!options.cropBoxResizable) {\n                    addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-line\")), CLASS_HIDDEN);\n                    addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-point\")), CLASS_HIDDEN);\n                }\n                this.render();\n                this.ready = true;\n                this.setDragMode(options.dragMode);\n                if (options.autoCrop) {\n                    this.crop();\n                }\n                this.setData(options.data);\n                if (isFunction(options.ready)) {\n                    addListener(element, EVENT_READY, options.ready, {\n                        once: true\n                    });\n                }\n                dispatchEvent(element, EVENT_READY);\n            }\n        },\n        {\n            key: \"unbuild\",\n            value: function unbuild() {\n                if (!this.ready) {\n                    return;\n                }\n                this.ready = false;\n                this.unbind();\n                this.resetPreview();\n                var parentNode = this.cropper.parentNode;\n                if (parentNode) {\n                    parentNode.removeChild(this.cropper);\n                }\n                removeClass(this.element, CLASS_HIDDEN);\n            }\n        },\n        {\n            key: \"uncreate\",\n            value: function uncreate() {\n                if (this.ready) {\n                    this.unbuild();\n                    this.ready = false;\n                    this.cropped = false;\n                } else if (this.sizing) {\n                    this.sizingImage.onload = null;\n                    this.sizing = false;\n                    this.sized = false;\n                } else if (this.reloading) {\n                    this.xhr.onabort = null;\n                    this.xhr.abort();\n                } else if (this.image) {\n                    this.stop();\n                }\n            }\n        }\n    ], [\n        {\n            key: \"noConflict\",\n            value: function noConflict() {\n                window.Cropper = AnotherCropper;\n                return Cropper;\n            }\n        },\n        {\n            key: \"setDefaults\",\n            value: function setDefaults(options) {\n                assign(DEFAULTS, isPlainObject(options) && options);\n            }\n        }\n    ]);\n    return Cropper;\n}();\nassign(Cropper.prototype, render, preview, events, handlers, change, methods);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cropperjs/dist/cropper.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cropperjs/dist/cropper.css":
/*!*************************************************!*\
  !*** ./node_modules/cropperjs/dist/cropper.css ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"2557061948e6\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3JvcHBlcmpzL2Rpc3QvY3JvcHBlci5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZWNvbW1lcmNlLXVpdC8uL25vZGVfbW9kdWxlcy9jcm9wcGVyanMvZGlzdC9jcm9wcGVyLmNzcz80NDNkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMjU1NzA2MTk0OGU2XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cropperjs/dist/cropper.css\n");

/***/ })

};
;