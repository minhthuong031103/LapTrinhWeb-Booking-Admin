/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/redux-logger";
exports.ids = ["vendor-chunks/redux-logger"];
exports.modules = {

/***/ "(ssr)/./node_modules/redux-logger/dist/redux-logger.js":
/*!********************************************************!*\
  !*** ./node_modules/redux-logger/dist/redux-logger.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("!function(e, t) {\n     true ? t(exports) : 0;\n}(this, function(e) {\n    \"use strict\";\n    function t(e, t) {\n        e.super_ = t, e.prototype = Object.create(t.prototype, {\n            constructor: {\n                value: e,\n                enumerable: !1,\n                writable: !0,\n                configurable: !0\n            }\n        });\n    }\n    function r(e, t) {\n        Object.defineProperty(this, \"kind\", {\n            value: e,\n            enumerable: !0\n        }), t && t.length && Object.defineProperty(this, \"path\", {\n            value: t,\n            enumerable: !0\n        });\n    }\n    function n(e, t, r) {\n        n.super_.call(this, \"E\", e), Object.defineProperty(this, \"lhs\", {\n            value: t,\n            enumerable: !0\n        }), Object.defineProperty(this, \"rhs\", {\n            value: r,\n            enumerable: !0\n        });\n    }\n    function o(e, t) {\n        o.super_.call(this, \"N\", e), Object.defineProperty(this, \"rhs\", {\n            value: t,\n            enumerable: !0\n        });\n    }\n    function i(e, t) {\n        i.super_.call(this, \"D\", e), Object.defineProperty(this, \"lhs\", {\n            value: t,\n            enumerable: !0\n        });\n    }\n    function a(e, t, r) {\n        a.super_.call(this, \"A\", e), Object.defineProperty(this, \"index\", {\n            value: t,\n            enumerable: !0\n        }), Object.defineProperty(this, \"item\", {\n            value: r,\n            enumerable: !0\n        });\n    }\n    function f(e, t, r) {\n        var n = e.slice((r || t) + 1 || e.length);\n        return e.length = t < 0 ? e.length + t : t, e.push.apply(e, n), e;\n    }\n    function u(e) {\n        var t = \"undefined\" == typeof e ? \"undefined\" : N(e);\n        return \"object\" !== t ? t : e === Math ? \"math\" : null === e ? \"null\" : Array.isArray(e) ? \"array\" : \"[object Date]\" === Object.prototype.toString.call(e) ? \"date\" : \"function\" == typeof e.toString && /^\\/.*\\//.test(e.toString()) ? \"regexp\" : \"object\";\n    }\n    function l(e, t, r, c, s, d, p) {\n        s = s || [], p = p || [];\n        var g = s.slice(0);\n        if (\"undefined\" != typeof d) {\n            if (c) {\n                if (\"function\" == typeof c && c(g, d)) return;\n                if (\"object\" === (\"undefined\" == typeof c ? \"undefined\" : N(c))) {\n                    if (c.prefilter && c.prefilter(g, d)) return;\n                    if (c.normalize) {\n                        var h = c.normalize(g, d, e, t);\n                        h && (e = h[0], t = h[1]);\n                    }\n                }\n            }\n            g.push(d);\n        }\n        \"regexp\" === u(e) && \"regexp\" === u(t) && (e = e.toString(), t = t.toString());\n        var y = \"undefined\" == typeof e ? \"undefined\" : N(e), v = \"undefined\" == typeof t ? \"undefined\" : N(t), b = \"undefined\" !== y || p && p[p.length - 1].lhs && p[p.length - 1].lhs.hasOwnProperty(d), m = \"undefined\" !== v || p && p[p.length - 1].rhs && p[p.length - 1].rhs.hasOwnProperty(d);\n        if (!b && m) r(new o(g, t));\n        else if (!m && b) r(new i(g, e));\n        else if (u(e) !== u(t)) r(new n(g, e, t));\n        else if (\"date\" === u(e) && e - t !== 0) r(new n(g, e, t));\n        else if (\"object\" === y && null !== e && null !== t) if (p.filter(function(t) {\n            return t.lhs === e;\n        }).length) e !== t && r(new n(g, e, t));\n        else {\n            if (p.push({\n                lhs: e,\n                rhs: t\n            }), Array.isArray(e)) {\n                var w;\n                e.length;\n                for(w = 0; w < e.length; w++)w >= t.length ? r(new a(g, w, new i(void 0, e[w]))) : l(e[w], t[w], r, c, g, w, p);\n                for(; w < t.length;)r(new a(g, w, new o(void 0, t[w++])));\n            } else {\n                var x = Object.keys(e), S = Object.keys(t);\n                x.forEach(function(n, o) {\n                    var i = S.indexOf(n);\n                    i >= 0 ? (l(e[n], t[n], r, c, g, n, p), S = f(S, i)) : l(e[n], void 0, r, c, g, n, p);\n                }), S.forEach(function(e) {\n                    l(void 0, t[e], r, c, g, e, p);\n                });\n            }\n            p.length = p.length - 1;\n        }\n        else e !== t && (\"number\" === y && isNaN(e) && isNaN(t) || r(new n(g, e, t)));\n    }\n    function c(e, t, r, n) {\n        return n = n || [], l(e, t, function(e) {\n            e && n.push(e);\n        }, r), n.length ? n : void 0;\n    }\n    function s(e, t, r) {\n        if (r.path && r.path.length) {\n            var n, o = e[t], i = r.path.length - 1;\n            for(n = 0; n < i; n++)o = o[r.path[n]];\n            switch(r.kind){\n                case \"A\":\n                    s(o[r.path[n]], r.index, r.item);\n                    break;\n                case \"D\":\n                    delete o[r.path[n]];\n                    break;\n                case \"E\":\n                case \"N\":\n                    o[r.path[n]] = r.rhs;\n            }\n        } else switch(r.kind){\n            case \"A\":\n                s(e[t], r.index, r.item);\n                break;\n            case \"D\":\n                e = f(e, t);\n                break;\n            case \"E\":\n            case \"N\":\n                e[t] = r.rhs;\n        }\n        return e;\n    }\n    function d(e, t, r) {\n        if (e && t && r && r.kind) {\n            for(var n = e, o = -1, i = r.path ? r.path.length - 1 : 0; ++o < i;)\"undefined\" == typeof n[r.path[o]] && (n[r.path[o]] = \"number\" == typeof r.path[o] ? [] : {}), n = n[r.path[o]];\n            switch(r.kind){\n                case \"A\":\n                    s(r.path ? n[r.path[o]] : n, r.index, r.item);\n                    break;\n                case \"D\":\n                    delete n[r.path[o]];\n                    break;\n                case \"E\":\n                case \"N\":\n                    n[r.path[o]] = r.rhs;\n            }\n        }\n    }\n    function p(e, t, r) {\n        if (r.path && r.path.length) {\n            var n, o = e[t], i = r.path.length - 1;\n            for(n = 0; n < i; n++)o = o[r.path[n]];\n            switch(r.kind){\n                case \"A\":\n                    p(o[r.path[n]], r.index, r.item);\n                    break;\n                case \"D\":\n                    o[r.path[n]] = r.lhs;\n                    break;\n                case \"E\":\n                    o[r.path[n]] = r.lhs;\n                    break;\n                case \"N\":\n                    delete o[r.path[n]];\n            }\n        } else switch(r.kind){\n            case \"A\":\n                p(e[t], r.index, r.item);\n                break;\n            case \"D\":\n                e[t] = r.lhs;\n                break;\n            case \"E\":\n                e[t] = r.lhs;\n                break;\n            case \"N\":\n                e = f(e, t);\n        }\n        return e;\n    }\n    function g(e, t, r) {\n        if (e && t && r && r.kind) {\n            var n, o, i = e;\n            for(o = r.path.length - 1, n = 0; n < o; n++)\"undefined\" == typeof i[r.path[n]] && (i[r.path[n]] = {}), i = i[r.path[n]];\n            switch(r.kind){\n                case \"A\":\n                    p(i[r.path[n]], r.index, r.item);\n                    break;\n                case \"D\":\n                    i[r.path[n]] = r.lhs;\n                    break;\n                case \"E\":\n                    i[r.path[n]] = r.lhs;\n                    break;\n                case \"N\":\n                    delete i[r.path[n]];\n            }\n        }\n    }\n    function h(e, t, r) {\n        if (e && t) {\n            var n = function(n) {\n                r && !r(e, t, n) || d(e, t, n);\n            };\n            l(e, t, n);\n        }\n    }\n    function y(e) {\n        return \"color: \" + F[e].color + \"; font-weight: bold\";\n    }\n    function v(e) {\n        var t = e.kind, r = e.path, n = e.lhs, o = e.rhs, i = e.index, a = e.item;\n        switch(t){\n            case \"E\":\n                return [\n                    r.join(\".\"),\n                    n,\n                    \"â†’\",\n                    o\n                ];\n            case \"N\":\n                return [\n                    r.join(\".\"),\n                    o\n                ];\n            case \"D\":\n                return [\n                    r.join(\".\")\n                ];\n            case \"A\":\n                return [\n                    r.join(\".\") + \"[\" + i + \"]\",\n                    a\n                ];\n            default:\n                return [];\n        }\n    }\n    function b(e, t, r, n) {\n        var o = c(e, t);\n        try {\n            n ? r.groupCollapsed(\"diff\") : r.group(\"diff\");\n        } catch (e) {\n            r.log(\"diff\");\n        }\n        o ? o.forEach(function(e) {\n            var t = e.kind, n = v(e);\n            r.log.apply(r, [\n                \"%c \" + F[t].text,\n                y(t)\n            ].concat(P(n)));\n        }) : r.log(\"â€”â€” no diff â€”â€”\");\n        try {\n            r.groupEnd();\n        } catch (e) {\n            r.log(\"â€”â€” diff end â€”â€” \");\n        }\n    }\n    function m(e, t, r, n) {\n        switch(\"undefined\" == typeof e ? \"undefined\" : N(e)){\n            case \"object\":\n                return \"function\" == typeof e[n] ? e[n].apply(e, P(r)) : e[n];\n            case \"function\":\n                return e(t);\n            default:\n                return e;\n        }\n    }\n    function w(e) {\n        var t = e.timestamp, r = e.duration;\n        return function(e, n, o) {\n            var i = [\n                \"action\"\n            ];\n            return i.push(\"%c\" + String(e.type)), t && i.push(\"%c@ \" + n), r && i.push(\"%c(in \" + o.toFixed(2) + \" ms)\"), i.join(\" \");\n        };\n    }\n    function x(e, t) {\n        var r = t.logger, n = t.actionTransformer, o = t.titleFormatter, i = void 0 === o ? w(t) : o, a = t.collapsed, f = t.colors, u = t.level, l = t.diff, c = \"undefined\" == typeof t.titleFormatter;\n        e.forEach(function(o, s) {\n            var d = o.started, p = o.startedTime, g = o.action, h = o.prevState, y = o.error, v = o.took, w = o.nextState, x = e[s + 1];\n            x && (w = x.prevState, v = x.started - d);\n            var S = n(g), k = \"function\" == typeof a ? a(function() {\n                return w;\n            }, g, o) : a, j = D(p), E = f.title ? \"color: \" + f.title(S) + \";\" : \"\", A = [\n                \"color: gray; font-weight: lighter;\"\n            ];\n            A.push(E), t.timestamp && A.push(\"color: gray; font-weight: lighter;\"), t.duration && A.push(\"color: gray; font-weight: lighter;\");\n            var O = i(S, j, v);\n            try {\n                k ? f.title && c ? r.groupCollapsed.apply(r, [\n                    \"%c \" + O\n                ].concat(A)) : r.groupCollapsed(O) : f.title && c ? r.group.apply(r, [\n                    \"%c \" + O\n                ].concat(A)) : r.group(O);\n            } catch (e) {\n                r.log(O);\n            }\n            var N = m(u, S, [\n                h\n            ], \"prevState\"), P = m(u, S, [\n                S\n            ], \"action\"), C = m(u, S, [\n                y,\n                h\n            ], \"error\"), F = m(u, S, [\n                w\n            ], \"nextState\");\n            if (N) if (f.prevState) {\n                var L = \"color: \" + f.prevState(h) + \"; font-weight: bold\";\n                r[N](\"%c prev state\", L, h);\n            } else r[N](\"prev state\", h);\n            if (P) if (f.action) {\n                var T = \"color: \" + f.action(S) + \"; font-weight: bold\";\n                r[P](\"%c action    \", T, S);\n            } else r[P](\"action    \", S);\n            if (y && C) if (f.error) {\n                var M = \"color: \" + f.error(y, h) + \"; font-weight: bold;\";\n                r[C](\"%c error     \", M, y);\n            } else r[C](\"error     \", y);\n            if (F) if (f.nextState) {\n                var _ = \"color: \" + f.nextState(w) + \"; font-weight: bold\";\n                r[F](\"%c next state\", _, w);\n            } else r[F](\"next state\", w);\n            l && b(h, w, r, k);\n            try {\n                r.groupEnd();\n            } catch (e) {\n                r.log(\"â€”â€” log end â€”â€”\");\n            }\n        });\n    }\n    function S() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = Object.assign({}, L, e), r = t.logger, n = t.stateTransformer, o = t.errorTransformer, i = t.predicate, a = t.logErrors, f = t.diffPredicate;\n        if (\"undefined\" == typeof r) return function() {\n            return function(e) {\n                return function(t) {\n                    return e(t);\n                };\n            };\n        };\n        if (e.getState && e.dispatch) return console.error(\"[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\\n// Logger with default options\\nimport { logger } from 'redux-logger'\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\\nimport createLogger from 'redux-logger'\\nconst logger = createLogger({\\n  // ...options\\n});\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n\"), function() {\n            return function(e) {\n                return function(t) {\n                    return e(t);\n                };\n            };\n        };\n        var u = [];\n        return function(e) {\n            var r = e.getState;\n            return function(e) {\n                return function(l) {\n                    if (\"function\" == typeof i && !i(r, l)) return e(l);\n                    var c = {};\n                    u.push(c), c.started = O.now(), c.startedTime = new Date, c.prevState = n(r()), c.action = l;\n                    var s = void 0;\n                    if (a) try {\n                        s = e(l);\n                    } catch (e) {\n                        c.error = o(e);\n                    }\n                    else s = e(l);\n                    c.took = O.now() - c.started, c.nextState = n(r());\n                    var d = t.diff && \"function\" == typeof f ? f(r, l) : t.diff;\n                    if (x(u, Object.assign({}, t, {\n                        diff: d\n                    })), u.length = 0, c.error) throw c.error;\n                    return s;\n                };\n            };\n        };\n    }\n    var k, j, E = function(e, t) {\n        return new Array(t + 1).join(e);\n    }, A = function(e, t) {\n        return E(\"0\", t - e.toString().length) + e;\n    }, D = function(e) {\n        return A(e.getHours(), 2) + \":\" + A(e.getMinutes(), 2) + \":\" + A(e.getSeconds(), 2) + \".\" + A(e.getMilliseconds(), 3);\n    }, O = \"undefined\" != typeof performance && null !== performance && \"function\" == typeof performance.now ? performance : Date, N = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(e) {\n        return typeof e;\n    } : function(e) {\n        return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n    }, P = function(e) {\n        if (Array.isArray(e)) {\n            for(var t = 0, r = Array(e.length); t < e.length; t++)r[t] = e[t];\n            return r;\n        }\n        return Array.from(e);\n    }, C = [];\n    k = \"object\" === (\"undefined\" == typeof global ? \"undefined\" : N(global)) && global ? global :  false ? 0 : {}, j = k.DeepDiff, j && C.push(function() {\n        \"undefined\" != typeof j && k.DeepDiff === c && (k.DeepDiff = j, j = void 0);\n    }), t(n, r), t(o, r), t(i, r), t(a, r), Object.defineProperties(c, {\n        diff: {\n            value: c,\n            enumerable: !0\n        },\n        observableDiff: {\n            value: l,\n            enumerable: !0\n        },\n        applyDiff: {\n            value: h,\n            enumerable: !0\n        },\n        applyChange: {\n            value: d,\n            enumerable: !0\n        },\n        revertChange: {\n            value: g,\n            enumerable: !0\n        },\n        isConflict: {\n            value: function() {\n                return \"undefined\" != typeof j;\n            },\n            enumerable: !0\n        },\n        noConflict: {\n            value: function() {\n                return C && (C.forEach(function(e) {\n                    e();\n                }), C = null), c;\n            },\n            enumerable: !0\n        }\n    });\n    var F = {\n        E: {\n            color: \"#2196F3\",\n            text: \"CHANGED:\"\n        },\n        N: {\n            color: \"#4CAF50\",\n            text: \"ADDED:\"\n        },\n        D: {\n            color: \"#F44336\",\n            text: \"DELETED:\"\n        },\n        A: {\n            color: \"#2196F3\",\n            text: \"ARRAY:\"\n        }\n    }, L = {\n        level: \"log\",\n        logger: console,\n        logErrors: !0,\n        collapsed: void 0,\n        predicate: void 0,\n        duration: !1,\n        timestamp: !0,\n        stateTransformer: function(e) {\n            return e;\n        },\n        actionTransformer: function(e) {\n            return e;\n        },\n        errorTransformer: function(e) {\n            return e;\n        },\n        colors: {\n            title: function() {\n                return \"inherit\";\n            },\n            prevState: function() {\n                return \"#9E9E9E\";\n            },\n            action: function() {\n                return \"#03A9F4\";\n            },\n            nextState: function() {\n                return \"#4CAF50\";\n            },\n            error: function() {\n                return \"#F20404\";\n            }\n        },\n        diff: !1,\n        diffPredicate: void 0,\n        transformer: void 0\n    }, T = function() {\n        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = e.dispatch, r = e.getState;\n        return \"function\" == typeof t || \"function\" == typeof r ? S()({\n            dispatch: t,\n            getState: r\n        }) : void console.error(\"\\n[redux-logger v3] BREAKING CHANGE\\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\\n[redux-logger v3] Change\\n[redux-logger v3] import createLogger from 'redux-logger'\\n[redux-logger v3] to\\n[redux-logger v3] import { createLogger } from 'redux-logger'\\n\");\n    };\n    e.defaults = L, e.createLogger = S, e.logger = T, e.default = T, Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/redux-logger/dist/redux-logger.js\n");

/***/ })

};
;