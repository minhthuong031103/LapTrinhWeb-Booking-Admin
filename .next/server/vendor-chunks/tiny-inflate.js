"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tiny-inflate";
exports.ids = ["vendor-chunks/tiny-inflate"];
exports.modules = {

/***/ "(ssr)/./node_modules/tiny-inflate/index.js":
/*!********************************************!*\
  !*** ./node_modules/tiny-inflate/index.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nvar TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\nfunction Tree() {\n    this.table = new Uint16Array(16); /* table of code length counts */ \n    this.trans = new Uint16Array(288); /* code -> symbol translation table */ \n}\nfunction Data(source, dest) {\n    this.source = source;\n    this.sourceIndex = 0;\n    this.tag = 0;\n    this.bitcount = 0;\n    this.dest = dest;\n    this.destLen = 0;\n    this.ltree = new Tree(); /* dynamic length/symbol tree */ \n    this.dtree = new Tree(); /* dynamic distance tree */ \n}\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */ var sltree = new Tree();\nvar sdtree = new Tree();\n/* extra bits and base tables for length codes */ var length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n/* extra bits and base tables for distance codes */ var dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n/* special ordering of code length codes */ var clcidx = new Uint8Array([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]);\n/* used by tinf_decode_trees, avoids allocations every call */ var code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */ /* build extra bits and base tables */ function tinf_build_bits_base(bits, base, delta, first) {\n    var i, sum;\n    /* build bits table */ for(i = 0; i < delta; ++i)bits[i] = 0;\n    for(i = 0; i < 30 - delta; ++i)bits[i + delta] = i / delta | 0;\n    /* build base table */ for(sum = first, i = 0; i < 30; ++i){\n        base[i] = sum;\n        sum += 1 << bits[i];\n    }\n}\n/* build the fixed huffman trees */ function tinf_build_fixed_trees(lt, dt) {\n    var i;\n    /* build fixed length tree */ for(i = 0; i < 7; ++i)lt.table[i] = 0;\n    lt.table[7] = 24;\n    lt.table[8] = 152;\n    lt.table[9] = 112;\n    for(i = 0; i < 24; ++i)lt.trans[i] = 256 + i;\n    for(i = 0; i < 144; ++i)lt.trans[24 + i] = i;\n    for(i = 0; i < 8; ++i)lt.trans[24 + 144 + i] = 280 + i;\n    for(i = 0; i < 112; ++i)lt.trans[24 + 144 + 8 + i] = 144 + i;\n    /* build fixed distance tree */ for(i = 0; i < 5; ++i)dt.table[i] = 0;\n    dt.table[5] = 32;\n    for(i = 0; i < 32; ++i)dt.trans[i] = i;\n}\n/* given an array of code lengths, build a tree */ var offs = new Uint16Array(16);\nfunction tinf_build_tree(t, lengths, off, num) {\n    var i, sum;\n    /* clear code length count table */ for(i = 0; i < 16; ++i)t.table[i] = 0;\n    /* scan symbol lengths, and sum code length counts */ for(i = 0; i < num; ++i)t.table[lengths[off + i]]++;\n    t.table[0] = 0;\n    /* compute offset table for distribution sort */ for(sum = 0, i = 0; i < 16; ++i){\n        offs[i] = sum;\n        sum += t.table[i];\n    }\n    /* create code->symbol translation table (symbols sorted by code) */ for(i = 0; i < num; ++i){\n        if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n    }\n}\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */ /* get one bit from source stream */ function tinf_getbit(d) {\n    /* check if tag is empty */ if (!d.bitcount--) {\n        /* load next tag */ d.tag = d.source[d.sourceIndex++];\n        d.bitcount = 7;\n    }\n    /* shift bit out of tag */ var bit = d.tag & 1;\n    d.tag >>>= 1;\n    return bit;\n}\n/* read a num bit value from a stream and add base */ function tinf_read_bits(d, num, base) {\n    if (!num) return base;\n    while(d.bitcount < 24){\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n    }\n    var val = d.tag & 0xffff >>> 16 - num;\n    d.tag >>>= num;\n    d.bitcount -= num;\n    return val + base;\n}\n/* given a data stream and a tree, decode a symbol */ function tinf_decode_symbol(d, t) {\n    while(d.bitcount < 24){\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n    }\n    var sum = 0, cur = 0, len = 0;\n    var tag = d.tag;\n    /* get more bits while code value is above sum */ do {\n        cur = 2 * cur + (tag & 1);\n        tag >>>= 1;\n        ++len;\n        sum += t.table[len];\n        cur -= t.table[len];\n    }while (cur >= 0);\n    d.tag = tag;\n    d.bitcount -= len;\n    return t.trans[sum + cur];\n}\n/* given a data stream, decode dynamic trees from it */ function tinf_decode_trees(d, lt, dt) {\n    var hlit, hdist, hclen;\n    var i, num, length;\n    /* get 5 bits HLIT (257-286) */ hlit = tinf_read_bits(d, 5, 257);\n    /* get 5 bits HDIST (1-32) */ hdist = tinf_read_bits(d, 5, 1);\n    /* get 4 bits HCLEN (4-19) */ hclen = tinf_read_bits(d, 4, 4);\n    for(i = 0; i < 19; ++i)lengths[i] = 0;\n    /* read code lengths for code length alphabet */ for(i = 0; i < hclen; ++i){\n        /* get 3 bits code length (0-7) */ var clen = tinf_read_bits(d, 3, 0);\n        lengths[clcidx[i]] = clen;\n    }\n    /* build code length tree */ tinf_build_tree(code_tree, lengths, 0, 19);\n    /* decode code lengths for the dynamic trees */ for(num = 0; num < hlit + hdist;){\n        var sym = tinf_decode_symbol(d, code_tree);\n        switch(sym){\n            case 16:\n                /* copy previous code length 3-6 times (read 2 bits) */ var prev = lengths[num - 1];\n                for(length = tinf_read_bits(d, 2, 3); length; --length){\n                    lengths[num++] = prev;\n                }\n                break;\n            case 17:\n                /* repeat code length 0 for 3-10 times (read 3 bits) */ for(length = tinf_read_bits(d, 3, 3); length; --length){\n                    lengths[num++] = 0;\n                }\n                break;\n            case 18:\n                /* repeat code length 0 for 11-138 times (read 7 bits) */ for(length = tinf_read_bits(d, 7, 11); length; --length){\n                    lengths[num++] = 0;\n                }\n                break;\n            default:\n                /* values 0-15 represent the actual code lengths */ lengths[num++] = sym;\n                break;\n        }\n    }\n    /* build dynamic trees */ tinf_build_tree(lt, lengths, 0, hlit);\n    tinf_build_tree(dt, lengths, hlit, hdist);\n}\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */ /* given a stream and two trees, inflate a block of data */ function tinf_inflate_block_data(d, lt, dt) {\n    while(1){\n        var sym = tinf_decode_symbol(d, lt);\n        /* check for end of block */ if (sym === 256) {\n            return TINF_OK;\n        }\n        if (sym < 256) {\n            d.dest[d.destLen++] = sym;\n        } else {\n            var length, dist, offs;\n            var i;\n            sym -= 257;\n            /* possibly get more bits from length code */ length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n            dist = tinf_decode_symbol(d, dt);\n            /* possibly get more bits from distance code */ offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n            /* copy match */ for(i = offs; i < offs + length; ++i){\n                d.dest[d.destLen++] = d.dest[i];\n            }\n        }\n    }\n}\n/* inflate an uncompressed block of data */ function tinf_inflate_uncompressed_block(d) {\n    var length, invlength;\n    var i;\n    /* unread from bitbuffer */ while(d.bitcount > 8){\n        d.sourceIndex--;\n        d.bitcount -= 8;\n    }\n    /* get length */ length = d.source[d.sourceIndex + 1];\n    length = 256 * length + d.source[d.sourceIndex];\n    /* get one's complement of length */ invlength = d.source[d.sourceIndex + 3];\n    invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n    /* check length */ if (length !== (~invlength & 0x0000ffff)) return TINF_DATA_ERROR;\n    d.sourceIndex += 4;\n    /* copy block */ for(i = length; i; --i)d.dest[d.destLen++] = d.source[d.sourceIndex++];\n    /* make sure we start next block on a byte boundary */ d.bitcount = 0;\n    return TINF_OK;\n}\n/* inflate stream from source to dest */ function tinf_uncompress(source, dest) {\n    var d = new Data(source, dest);\n    var bfinal, btype, res;\n    do {\n        /* read final block flag */ bfinal = tinf_getbit(d);\n        /* read block type (2 bits) */ btype = tinf_read_bits(d, 2, 0);\n        /* decompress block */ switch(btype){\n            case 0:\n                /* decompress uncompressed block */ res = tinf_inflate_uncompressed_block(d);\n                break;\n            case 1:\n                /* decompress block with fixed huffman trees */ res = tinf_inflate_block_data(d, sltree, sdtree);\n                break;\n            case 2:\n                /* decompress block with dynamic huffman trees */ tinf_decode_trees(d, d.ltree, d.dtree);\n                res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n                break;\n            default:\n                res = TINF_DATA_ERROR;\n        }\n        if (res !== TINF_OK) throw new Error(\"Data error\");\n    }while (!bfinal);\n    if (d.destLen < d.dest.length) {\n        if (typeof d.dest.slice === \"function\") return d.dest.slice(0, d.destLen);\n        else return d.dest.subarray(0, d.destLen);\n    }\n    return d.dest;\n}\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */ /* build fixed huffman trees */ tinf_build_fixed_trees(sltree, sdtree);\n/* build extra bits and base tables */ tinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n/* fix a special case */ length_bits[28] = 0;\nlength_base[28] = 258;\nmodule.exports = tinf_uncompress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tiny-inflate/index.js\n");

/***/ })

};
;