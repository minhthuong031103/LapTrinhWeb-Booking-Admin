"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/clone";
exports.ids = ["vendor-chunks/clone"];
exports.modules = {

/***/ "(ssr)/./node_modules/clone/clone.js":
/*!*************************************!*\
  !*** ./node_modules/clone/clone.js ***!
  \*************************************/
/***/ ((module) => {

eval("\nvar clone = function() {\n    \"use strict\";\n    function _instanceof(obj, type) {\n        return type != null && obj instanceof type;\n    }\n    var nativeMap;\n    try {\n        nativeMap = Map;\n    } catch (_) {\n        // maybe a reference error because no `Map`. Give it a dummy value that no\n        // value will ever be an instanceof.\n        nativeMap = function() {};\n    }\n    var nativeSet;\n    try {\n        nativeSet = Set;\n    } catch (_) {\n        nativeSet = function() {};\n    }\n    var nativePromise;\n    try {\n        nativePromise = Promise;\n    } catch (_) {\n        nativePromise = function() {};\n    }\n    /**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/ function clone(parent, circular, depth, prototype, includeNonEnumerable) {\n        if (typeof circular === \"object\") {\n            depth = circular.depth;\n            prototype = circular.prototype;\n            includeNonEnumerable = circular.includeNonEnumerable;\n            circular = circular.circular;\n        }\n        // maintain two arrays for circular references, where corresponding parents\n        // and children have the same index\n        var allParents = [];\n        var allChildren = [];\n        var useBuffer = typeof Buffer != \"undefined\";\n        if (typeof circular == \"undefined\") circular = true;\n        if (typeof depth == \"undefined\") depth = Infinity;\n        // recurse this function so we don't reset allParents and allChildren\n        function _clone(parent, depth) {\n            // cloning null always returns null\n            if (parent === null) return null;\n            if (depth === 0) return parent;\n            var child;\n            var proto;\n            if (typeof parent != \"object\") {\n                return parent;\n            }\n            if (_instanceof(parent, nativeMap)) {\n                child = new nativeMap();\n            } else if (_instanceof(parent, nativeSet)) {\n                child = new nativeSet();\n            } else if (_instanceof(parent, nativePromise)) {\n                child = new nativePromise(function(resolve, reject) {\n                    parent.then(function(value) {\n                        resolve(_clone(value, depth - 1));\n                    }, function(err) {\n                        reject(_clone(err, depth - 1));\n                    });\n                });\n            } else if (clone.__isArray(parent)) {\n                child = [];\n            } else if (clone.__isRegExp(parent)) {\n                child = new RegExp(parent.source, __getRegExpFlags(parent));\n                if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n            } else if (clone.__isDate(parent)) {\n                child = new Date(parent.getTime());\n            } else if (useBuffer && Buffer.isBuffer(parent)) {\n                if (Buffer.allocUnsafe) {\n                    // Node.js >= 4.5.0\n                    child = Buffer.allocUnsafe(parent.length);\n                } else {\n                    // Older Node.js versions\n                    child = new Buffer(parent.length);\n                }\n                parent.copy(child);\n                return child;\n            } else if (_instanceof(parent, Error)) {\n                child = Object.create(parent);\n            } else {\n                if (typeof prototype == \"undefined\") {\n                    proto = Object.getPrototypeOf(parent);\n                    child = Object.create(proto);\n                } else {\n                    child = Object.create(prototype);\n                    proto = prototype;\n                }\n            }\n            if (circular) {\n                var index = allParents.indexOf(parent);\n                if (index != -1) {\n                    return allChildren[index];\n                }\n                allParents.push(parent);\n                allChildren.push(child);\n            }\n            if (_instanceof(parent, nativeMap)) {\n                parent.forEach(function(value, key) {\n                    var keyChild = _clone(key, depth - 1);\n                    var valueChild = _clone(value, depth - 1);\n                    child.set(keyChild, valueChild);\n                });\n            }\n            if (_instanceof(parent, nativeSet)) {\n                parent.forEach(function(value) {\n                    var entryChild = _clone(value, depth - 1);\n                    child.add(entryChild);\n                });\n            }\n            for(var i in parent){\n                var attrs;\n                if (proto) {\n                    attrs = Object.getOwnPropertyDescriptor(proto, i);\n                }\n                if (attrs && attrs.set == null) {\n                    continue;\n                }\n                child[i] = _clone(parent[i], depth - 1);\n            }\n            if (Object.getOwnPropertySymbols) {\n                var symbols = Object.getOwnPropertySymbols(parent);\n                for(var i = 0; i < symbols.length; i++){\n                    // Don't need to worry about cloning a symbol because it is a primitive,\n                    // like a number or string.\n                    var symbol = symbols[i];\n                    var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n                    if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n                        continue;\n                    }\n                    child[symbol] = _clone(parent[symbol], depth - 1);\n                    if (!descriptor.enumerable) {\n                        Object.defineProperty(child, symbol, {\n                            enumerable: false\n                        });\n                    }\n                }\n            }\n            if (includeNonEnumerable) {\n                var allPropertyNames = Object.getOwnPropertyNames(parent);\n                for(var i = 0; i < allPropertyNames.length; i++){\n                    var propertyName = allPropertyNames[i];\n                    var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n                    if (descriptor && descriptor.enumerable) {\n                        continue;\n                    }\n                    child[propertyName] = _clone(parent[propertyName], depth - 1);\n                    Object.defineProperty(child, propertyName, {\n                        enumerable: false\n                    });\n                }\n            }\n            return child;\n        }\n        return _clone(parent, depth);\n    }\n    /**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */ clone.clonePrototype = function clonePrototype(parent) {\n        if (parent === null) return null;\n        var c = function() {};\n        c.prototype = parent;\n        return new c();\n    };\n    // private utility functions\n    function __objToStr(o) {\n        return Object.prototype.toString.call(o);\n    }\n    clone.__objToStr = __objToStr;\n    function __isDate(o) {\n        return typeof o === \"object\" && __objToStr(o) === \"[object Date]\";\n    }\n    clone.__isDate = __isDate;\n    function __isArray(o) {\n        return typeof o === \"object\" && __objToStr(o) === \"[object Array]\";\n    }\n    clone.__isArray = __isArray;\n    function __isRegExp(o) {\n        return typeof o === \"object\" && __objToStr(o) === \"[object RegExp]\";\n    }\n    clone.__isRegExp = __isRegExp;\n    function __getRegExpFlags(re) {\n        var flags = \"\";\n        if (re.global) flags += \"g\";\n        if (re.ignoreCase) flags += \"i\";\n        if (re.multiline) flags += \"m\";\n        return flags;\n    }\n    clone.__getRegExpFlags = __getRegExpFlags;\n    return clone;\n}();\nif ( true && module.exports) {\n    module.exports = clone;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/clone/clone.js\n");

/***/ })

};
;